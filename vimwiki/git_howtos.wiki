 to local repo= my old howtos =
== git architecture and general ==
git has 3 trees: repo, staged area and working directory
HEAD points to tip of current branch repo
MASTER branch is 
== configuring git ==
git config --global user.name "Dan Slov"
git config --global user.email "dan.slov@gmail.com"
git config --global credential.helper cache
git config --global credential.helper 'cache --timeout=3600'

== SSH keys ==
cd ~/.ssh
ssh-keygen -t rsa -C "your_email@example.com"
# Downloads and installs xclip
sudo apt-get install xclip
xclip -sel clip < ~/.ssh/id_rsa.pub
# Copies the contents of the id_rsa.pub file to your clipboard
# Attempts to ssh to github
ssh -T git@github.com

= setup =
    $ wget http://kernel.org/pub/software/scm/git/git-1.6.0.tar.gz
    $ tar xzf git-1.6.0.tar.gz
    $ cd git-1.6.0
    $ ./configure
    $ make all 
    $ make install
check the version:
    $ git --version
Configure the public key for the GitHub
    $ ssh-keygen -t rsa -C "your_email@youremail.com"
Add your SSH key to GitHub (need to login to web site).
Make sure it works:
    ssh -T git@github.com
I did that and received a message that all is fine but the site doesnt support command line
Add git updates to your git path    
    /usr/local/git/bin/git clone git://git.kernel.org/pub/scm/git/git.git
Define diff:
    /usr/local/git/bin/git config --global merge.tool vimdiff
    
/etc/gitconfig 
    Contains values for every user on the system and all their repositories. If you pass the option --system to git config, it reads and writes from this file specifically.
~/.gitconfig
    Specific to your user. You can make Git read and write to this file specifically by passing the --global option.
    config file in the git directory (that is, .git/config) of whatever repository you’re currently using: Specific to that single repository. Each level overrides values in the previous level, so values in .git/config trump those in /etc/gitconfig.
Config use.name and user.email globally
    git config --global user.name "John Doe"
    git config --global user.email johndoe@example.com
If you want to use a different username for a different repo just cd into repo dir and:
    cd my_other_repo
    git config user.name "Different Name"
    git config user.email "differentemail@email.com"
GitHub user name and token:
    git config --global github.user username
    git config --global github.token some_token

create a local repo:
    $ mkdir ~/Hello-World
    $ cd ~/Hello-World
    $ git init
    $ touch README
Add all the files and directories in the current dir (where repo is)
commit for the first time:
    $ git add .
Or alternatively in this case where there is just one file:
    $ git add README
== unstage file ==
If you changed your mind and want to unstage the file
    $ git rm --cached README
or after the commit you may just remove the file from both the index and workdir
    $ git rm README
To recover old versions of files
    $ git checkout HEAD -- file_name
== move files ==
To move files. The following to things are equivalent:
    $ mv stuff newstuff 
    $ git rm stuff 
    $ git add newstuff
or
    $ git mv stuff newstuff

###############################
== commit ==
    $ git commit -m 'first commit'
* adding -a also adds all KNOWN files    
    $ git commit -am 'first commit'
or with more details
    git commit -a -m "swp removed" --author="Dan Slov <dan.slov@gmail.com>"
# to edit the commit message: git commit --amend -m "new commit message"
to see more detail about some config copy the hash from git log. example:
    $ git log
copy the hash line and then:
    $git show 7f43a89c39928edba461a0be72aa7f2e51e2d93e
To see development branch:
    git show-branch --more=10
== tag create / maintain ==
* list tags:
  $ git tag
* Create tag 
  $ git tag -m"Tag version 1.0" V1.0 3ede462
* push tags 
  $ git push --tags


== remove file ==
    # Remove indexed file
    rm nonsense.txt
    # Try standard way of committing -> will not work 
    git add . && git commit -m "a new file has been created"
    # Now commit with the -a flag
    git commit -a -m "File nonsense.txt is now removed"
    # Alternatively you could add deleted files to the staging index via
    git add -A . 
    git commit -m "File nonsense.t04. Ignoring Files-Ignoring tracked filesxt is now removed"
=== remove untracked files ===
git clean -n    :shows what file may be cleaned
git clean -f    :cleans all untracked files. DESTRUCTIVE
=== Ignoring Files-Ignoring tracked files untracked files ===
add file to .gitignore
git rm --cached filename
== git alias ==
$ git config --global alias.show-graph 'log --graph --abbrev-commit --pretty=oneline'

== git undo changes ==
=== undo working dir changes ===
* simple case: changes in the working dir, rollback to the last commit:
git checkout -- <file/dir name>     : -- is there only to to confuse with branch name
git checkout tree-ish -- <file/dir name>  : in case want to revert to some of older versions
=== unstage changes ===
* let's say you added a file that isnt supposed to be commited
git reset HEAD <file>     : unstages
=== amend commits ===
* only the very last commit can be modified
a) first add your changes to index
git add <file(s)>
git commit --amend -m "some new message"
=== revert commit ===
* basically takes a commit and UNDOs all the changes. ?? I need to be clear on this one
* to me it seems the same as checkout
git revert tree-ish 
git revert -in tree-ish   # don't commit after revert
=== undo commits - reset ===
* reset changes HEAD pointer
--soft    :doesnt change staging index or working directory
# it is pretty safe if we copy log before so we could get reset again to later commit
git reset --soft tree-ish   # all the later commits will just disapear from the log
--mixed   :default. changes staging index and repo. Doesnt affect working dir
--hard    :changes repo and makes working dir and staging index match the repo
== navigating commits ==
=== tree-ish objects ===
HEAD
^HEAD     : parent commit (^^HEAD, ^^^HEAD and so on)
HEAD~1    : another way to point to parent commit
git ls-tree <tree-ish>  : ls git commited files
=== git log ===
* show to commits between -10 to -12:
    $ git log --pretty=short --abbrev-commit master~12..master~10
* -p prints the patch, or changes, introduced by the commit: 
    $ git log -1 -p 4fe86488
* show just 3 commits (one line for each)
    $ git log --oneline -3
* use --since( --after), --before (--until)
    $ git log --since="2 weeks ago" --until="3days ago"
    $ git log --since=2.weeks --until=3.days
* use filters (by author for example)
    $ git log --author=dslov
* show graph:
    $ gitk$ git checkout -b bug/pr-3

= branch =
# create branch
    $ git branch prs/pr-1138
# list all branches
    $ git branch
# checkout some particular branch
    $ git checkout bug/pr-1
# shorcut is: git checkout -b new_branch   (create a branch and switch to it)
# if there are some modified files in the workarea git will attempt
# to merge with the checked out files if -m flag is specified:
    $ git checkout -m dev 
        M NewStuff 
        Switched to branch "dev"
# another case is that after checkout a developper realized that he wants to ci files to the new branch:
# -b flag would allow to create anew branch that would have all the modified files indexed
    $ git checkout -b bug/pr-3
# Ti rename a branch (--move)
#   $ git branch -m old_name new_name
# To delete a branch:
    $ git branch -d bug/pr-3
# you can recover an accidentally deleted branch by using the 
    $ git reflog
# Other commands: such as git fsck, and configuration options, such as gc.reflog,
  Expire and gc.pruneExpire, can also help
 

== diff - show difference==
* to use vimdiff for files:
https://technotales.wordpress.com/2009/05/17/git-diff-with-vimdiff/
* git diff commit1 commit2 -  the differences between the two arbitrary commits.
* git diff treeish          :show diffs between work dir and repository (HEAD by default)
* git diff --staged         :show diffs between working directory and staged index
#   If the option --cached doesn’t make sense to you, perhaps the synonym --staged will.
* git diff --cached         :show diffs between working directory and staged index
git diff --cached tree-ish    :the differences between the staged and the given commit.
=== blame ===
git blame index.html --data short
=== file diff ===
git diff tree-ish filename  :the diff between the file in the working directory tree-ish
git diff -w                 :ignore white spaces
# using unix diff (diff -r will traverse two tree objects):
    $ diff -u initial rewrite
=== branch diff ===
* git diff master..branch1
* diff between specific file in diff branches
  $ git diff lebigmac master  -- vimwiki/index.wiki
* git branch --merged
shows all branches that merged into the current one (and, in theory, could be
eliminated)
# list all changes from master to bug/pr-1:
    $ git log -p master..bug/pr-1
== stash ==
* stash all the changes and run git reset --hard HEAD  
  $ git stash save "stash description"
* do not stash the staging area (need to test this one):
  $ git stash save --keep-index
* stash untracked files:
  $ git stash save --include-untracked
  $ git stash -u (git stash --include-untracked) 
* view stash:
  $ git stash list        will display list of stashes
* show more info about one particular stash:
  $ git stash show -p stash@{1}
  git stash apply         leaves copy in stash
  git stash pop           removes it from the stash
* delete stash  
  git stash drop        stash@{0} 
  git stash clear       : deletes all stashes
= Merge (merging branches) =
* --no-ff flag would not incorporate commits of the branch being merged:
    $ git merge alternate
    $ git merge --no-ff alternate
    $ git merge v1.0 --no-commit --no-ff
* in case of conflicts, git just writes conflicted files, important to fix it
* if there are too many conflicts:
    $ git merge --abort
* use merge tool
  $ git mergetool --tool=meld
= REBASE =
* eliminates merge-commit(ie commit after merge)
* local rebase example: rebase hotfix branch on develop branch:
  $ git checkout hotfix
  $ git rebase develop (now we have hotfix branch that contains all develop
  commits and, on top of them, hotfix commits)
  $ checkout develop
  $ merge hotfix    (this one would sync develop and hotfix)
* conflict example (master has conflicted files with origin/master):
  $ git fetch
  $ git rebase
* from here, in case of a conflict, there are 3 options:
  $ git rebase --continue (after resolving the conflict)
  $ git rebase --skip     (skip meaning drop conflicting commit from the local
  repo) 
  $ git rebase --abort    (abort rebase altogether)
* in case of git rebase --continue:
** resolve the conflict
** add the fixed files: $ git add file_names
** $ git rebase --continue
= REMOTE =
== push to github ==
$ git remote add origin git@github.com:username/Hello-World.git
$ git push origin master
== Create remote *bare* repo for push/pull only ==
  $ git init --bare project1.git  
* see all the remotes:
  $ git remote
* add remote (typically remote is called origin)
  $ git remote alias URL
* remove remote
  $ git remote rm alias
== Remote branch ==
=== create remote branch ===
  $ git checkout local_branch_name
  $ git push origin local_branch_name
** if need to pull changes from there
  $ git pull origin local_branch_name
** if repeated many times 
  $ git branch --set-upstream local_branch_name origin/local_branch_name
  $ git pull
=== checkout remote branch ===
* if somebody else created a branch and you want to pull it
  $ git pull
  $ git branch local_name origin/branch_name      : will make tracking branch
  or
  $ git checkout -b develop origin/develop
=== delete remote branch ===
  $ git push origin :v0
  or more intuitive:
  $ git push origin --delete hotfix_branch
* prune all the deleted remote branches  
  $ git remote prune origin
=== show origin - IMPORTANT ===
# it is all confusing so the command to see all branches and tracking status:
  $ git remote show origin
== tracking ==
http://www.gitguys.com/topics/tracking-branches-and-remote-tracking-branches/
http://www.gitguys.com/topics/adding-and-removing-remote-branches
refs/remotes/origin/master should be remote-tracking branch (whatever is fefined
                        for fetch in refs/config
also:
git branch --set-upstream-to=refs/remotes/origin/master master
* Branch v0 set up to track remote branch v0 from origin.
  $ git branch --set-upstream v0 origin/v0  
* push -u makes sure that changes in remote are tracked
  ie it makes the current branch a tracking branch
  $ git push -u origin master
* or to have local branch track remote branch with different name
  $ git push -u origin some_local_branch:remote_branch_name  
=== remote basics ===  
* see all branches  
  $ git branch -a
* fetch from remote to local repo (but not working directory)  
  $ git fetch
* merge changes and commit 
  $ git merge origin/master 
* git pull   - "git fetch + git merge" together
* pull while specifying remote branch name
  $ git pull origin branch_name
git push   - Transfers objects and their related metadata to a remote repository
git ls-remote   Shows references within a remote
== Remote FAQ ==
* ambiguous input
http://stackoverflow.com/questions/26046698/git-refname-origin-master-is-ambiguous
* how to delete unwanted ref:
git update-ref -d refs/origin/master

$ git clone --bare /Users/dans/myproj .
git remote add origin /Users/dans/repos/myproj
git remote updates


= submodules =
https://chrisjean.com/git-submodules-adding-using-removing-and-updating/
* add submodule
git submodule add git@mygithost:billboard lib/billboard
* init submodule
git submodule init
* update submodule
git submodule update
* cd into submodule directory
git checkout master
git pull
git submodule update --init --recursive
* remove submodule is AWKWARD
edit .gitmodules, .git/config and then:
git rm –cached [plugin path]
== submodule untracked issue (when OS add files to subm directory)==
* specific problem when some untracked files are added to submodules dir (like in .vim/bundle/*/doc)
cd .vim/bundle
echo "doc/tags" > .gitignore_submodules
git submodule foreach git config --local core.excludesfile "../.gitignore_submodules"
= Git internals =
== refs and symrefs are in refs dir ==
# There could be 3 dirs in refs : tags (to hold tags), heads (to hold branches) and remotes.
    .git/ref
    .git/refs/ref
    .git/refs/tags/ref
    .git/refs/heads/ref
    .git/refs/remotes/ref
    .git/refs/remotes/ref/HEAD
# example of getting rev-parse of some parent of the 2nd parent of the 2nd parent of grandgrandparent
    $ git rev-parse master
    $ git show-branch --more=35 | tail -15
    $ git rev-parse master 


== git plumbing commands ==
# see the index content:
    $ git ls-files -s
#capture index state (SHA1 of the tree)
    $ git write-tree
# cat file
    $ git ls-files -s
# commit using low level hash:
    $ echo -n "Commit a file that says hello\n"  | git commit-tree 492413269336d21fac079d4a4672e55d5d2147ac
