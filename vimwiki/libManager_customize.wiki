Look at the Pretty Colors... 

The first is the ability to customize the display attributes of any library.  For example, you can specify that your reference libraries be shown in red text with a particular icon and your design libraries be shown in green text with a different icon.  You can even hide some libraries so they don't get in your way, but are still accessible to the software.  (Maybe you want to show your "experimental" libraries in a different color too...)

Basically the way you do this is to edit your cds.lib file.  Somewhere after the DEFINE statement for a library, put the line:

ASSIGN <libName> DISPLAY <displayName>

where <displayName> is the name you're going to give to a particular set of display attributes (we'll get to that shortly).

Now when you open the Library Manager, select Edit->Display Settings.  In that form, you'll be able to select your <displayName>(s) and change their colors, icons and other attributes. 
##############################################################################################################
Problem
We have custom (non-Cadence format) views for our layout designs. It is a format called LNF (Layout Native Format).
My questions are :
 
1. Can I use the Cadence db API functions on such lnf format views in my library ?
 
2. How can I customize the 'Open' button in Library Manager to non try to open such cellviews ?
Solution
Here are the answers to your queries :
 
1. db API (SKILL functions starting with db) would only work on Cadence CDBA format
cellviews/objects. These functions will not work on your native format (lnf)
data/views.
 
2. Here is the way to customize the Library Manager to achieve the same. The SKILL
functions used in this example are documented in Cadence Library Manager User
Guide.
 
1. Add the following to your ~/cdsLibMgr.il file. If this file does not exist,create
one by this name and add the following contents to it :
;;----------From here---------------
/*************************************************************************
* DISCLAIMER: The following code is provided for Cadence customers     *
* to use at their own risk. The code may require modification to     *
* satisfy the requirements of any user. The code and any modifications     *
* to the code may not be compatible with current or future versions of     *
* Cadence products. THE CODE IS PROVIDED "AS IS" AND WITH NO WARRANTIES, *
* INCLUDING WITHOUT LIMITATION ANY EXPRESS WARRANTIES OR IMPLIED     *
* WARRANTIES OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR USE.     *
*************************************************************************/
 
;;;; FileName: cdsLibMgr.il
 
;; Delete the 'File->Open..." and
;; "Open..." popup menu item provided by Cadence
lmgrManageMenuItems(list("FileOpenButton") nil)
 
;;Create your own version of 'Open...' button.
 
lmgrCreateMenuItem("myItem3" "simple"
          '( ("label" "Open...")
          ("callback" ("CCSMyPropCallBack")) ) )
 
;; Insert it in Edit pulldown menu exactly at the same location
;; as the original (just above open read only option)
 
lmgrInsertMenuItems( "FileOpenROButton" "V" list("myItem3"))
;;----------Upto here-------------
 
2. Add the following callback to your ~/.cdsinit file :
;;-----------From here--------------
procedure(CCSMyPropCallBack(@rest args)
let( (myargslist libName cellName viewName)
myargslist=cdr(args)
libName = nth(0 myargslist)
cellName = nth(1 myargslist)
viewName = nth(2 myargslist)
 
;;Add a conditional statement to only issue geOpen() when the
;; viewName/viewType is not 'lnf'/viewType registered for your
;; custom view.
 
;;Please change the condition in the following if() statement
;; as desired
 
  if( viewName != "lnf" then
  geOpen(?lib libName ?cell cellName ?view viewName)
   else
    printf("\nCannot use Cadence to open this cellview\n")
    );if
 
   );let
 
     );procedure
;;-----------Upto Here-----------

##############################################################################################################
Problem
When I run SKILL Lint on the cdsLibMgr.il file, it reports all the lmgr* functions (like lmgrAddMenuItems, lmgrCreateMenuItem etc) as undefined functions.
 
Is this a bug?  How do I check my cdsLibMgr.il code with SKILL lint?
Solution
These reports about lmgr* functions are correct. The lmgrAddMenuItems, lmgrCreateMenuItem etc. functions are coming up as undefined because they do not exist in DFII session. They are API functions defined only within the libManager session. To prove this, try typing lmgrAddMenuItems in your CIW you will get an undefined function error message.
 
To run the SKILL lint on cdsLibMgr.il file, you may use the following approach:
 
Since the lmgr* functions only exist in the libManager executable, the only way to run SKILL Lint correctly on the lmgr* functions is to use the libManager executable.
 
Here are the steps for running SKILL lint on lmgr* functions:
 
1) Rename the actual cdsLibMgr.il to some other name (say myCdsLibMgr.il)
 
2) Create a dummy cdsLibMgr.il file that contains the following two lines:
 
    sklint ?file "myCdsLibMgr.il" ?outputFile "file.log"
    exit()
 
3)Run "libManager" on the command-line, and the lint result/output will be dumped into file.log (as given in ?outputFile).


##############################################################################################################
Problem
I want to turn off 'No DM' option when users are creating libraries, either in the Library Manager or the CIW->File menu. I want my users to always use Version Control.
 
Is there any way to turn off this option?
Solution
For turning off the "No DM" option from CIW->File menu, please put the following lines in .cdsint file:
-----------------------------------------------------------------
ddsHiCreateLibrary()
ddsCreateLibForm->dmChoice->choices=list("VS")
ddsCreateLibForm->dmChoice->enabled=nil
hiFormCancel(ddsCreateLibForm)
-----------------------------------------------------------------
Here "VS" is the design manager tool. (Change it as the DM you are using)
 
In Library Manager, it is not possible to disable the 'No DM' option. The reason is that Library Manager is a separate process than icfb and the forms within libManager are not SKILL forms. There is limited interface for customization of libManager.
 
As a workaround, you can delete the New->Library... field altogether from Library Manager. That way the user would be forced to use the CIW->File menu to create libraries.
 
To achieve this, In the home directory, create a cdsLibMgr.il file and put the following line in it.
--------------------------------------------------------------------
lmgrDeleteMenuItems( '( "FileNewLibButton" ) )
--------------------------------------------------------------------
 
Now when Library manager gets opened, you will not get the New->Library.. button.

##############################################################################################################