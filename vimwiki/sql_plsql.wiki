= Little theory =
* Data Definition Language (DDL)
    These SQL commands are used for creating, modifying, and dropping the structure of database objects.
    The commands are CREATE, ALTER, DROP, RENAME, and TRUNCATE.

* Data Manipulation Language (DML)
    These SQL commands are used for storing, retrieving, modifying, and deleting data. 
    These commands are SELECT, INSERT, UPDATE, and DELETE.

* Transaction Control Language (TCL)
    These SQL commands are used for managing changes affecting the data. 
    These commands are COMMIT, ROLLBACK, and SAVEPOINT.

* Data Control Language (DCL)
    These SQL commands are used for providing security to database objects.
    These commands are GRANT and REVOKE.
= SQLPLUS =
== queries ==
* substition variables
SELECT first_name, last_name FROM employees WHERE employee_id = &eid;
SELECT first_name, last_name FROM employees WHERE last_name = '&name';
* use && if subst var is used more than once
SELECT first_name, last_name, &&prompt FROM employees WHERE last_name LIKE '%mit%' ORDER BY &prompt;
* use define for variable definition
DEFINE eid = 100;
SELECT first_name, last_name FROM employees WHERE employee_id = &eid;

== Tables ==
-- Create a table under other user schema
    CREATE TABLE some_other_user_name.person (id NUMBER, first VARCHAR2(30), state VARCHAR2(2));
-- add unique constraint to one field and Primary key to another    
    ALTER TABLE person ADD CONSTRAINT pk_person PRIMARY KEY(id);
    ALTER TABLE person ADD CONSTRAINT uk_person UNIQUE(state);
-- Add another column    
    ALTER TABLE person ADD zip_code VARCHAR(7) ;
    ALTER TABLE person ADD marital_status CHAR(1) DEFAULT 'S';
-- Modify column    
    ALTER TABLE person MODIFY marital_status CHAR(1) DEFAULT 'M';
-- add CHECK constraint (could be any condition)
    ALTER TABLE person ADD CONSTRAINT ck_marital_status CHECK( marital_status in ('S', 'M', 'D'));
-- Create a table from some other table
    CREATE TABLE colorado_person AS
        SELECT * FROM PERSON WHERE state = 'CO';
-- add foreign key constraint
    ALTER TABLE person ADD CONSTRAINT fk_person FOREIGN KEY(state) REFERENCES STATES(state);
-- create a view called "person_view" with just one column 'name'
  CREATE OR REPLACE VIEW person_view(name) AS
    SELECT last || ', ' || first 
    FROM person ORDER BY last, first;



describe employees
> returns columns of EMPLOYEES table along with data type and NULL/not NULL
= check value for NULL =


= Get only max value out of group =
    SELECT MAX(field) OVER (PARTITION BY some_other_field) some_name
    FROM some_table
    WHERE field = some_name;
Example:
    SELECT * FROM (
        SELECT DISTINCT COLL_CODE, MAJR_CODE , 
            DEGREE_CODE, SHRDGMR_GRAD_DATE, MAX(SHRDGMR_GRAD_DATE) over (partition by MAJR_CODE) MAXGRADYEAR  
        FROM SHRDGMR  
        WHERE SHRDGMR_LEVL_CODE = 'UG' 
    WHERE SHRDGMR_GRAD_DATE = MAXGRADYEAR) rdgmrcol;

= Little practice =
variable_name datatype [NOT NULL := value ]; 
== DATA TYPES / VARIABLES ==
  * NUMBER(precision, scale)
    NUMBER(4,2)  => 25.21, 25.157 => 25.16...
  * BOOLEAN  -- could be TRUE, FALSE, NULL
=== Composite DataTypes ===
    Records
    Nested Tables 
    Varrays 
    Associative Arrays
=== DATE ===
    11-NOV-2013 14:25:34
    l_date date := '10-nov-13';
    l_date := TO_DATE('10-NOV-2013 15:25:34', 'DD-MON-RRRR HH24:MI:SS');
    l_date := TO_DATE('11/10/2013 15:25:34', 'MM/DD/RRRR HH24:MI:SS');
    
=== Example === 
DECLARE
    l_second NUMBER DEFAULT 2.21;  
    salary  number (6); -- “salary” is a variable of datatype number and of length 6.
    INTEGER : NUMBER(38,0)
    l_second CONSTANT NUMBER DEFAULT 2.21;  -- constant declaration
    l_num_vartype l_num%TYPE := 1.123;      -- inherit type from 1.123
    l_num_coltype departments.dept_id%TYPE; -- inherit type from that coloumn  
    dept varchar2(10) NOT NULL := “HR Dept”;
    l_boolean BOOLEAN;

* Example: The below program will get the salary of an employee with id '1116' and display it on the screen.

DECLARE 
 var_salary number(6); 
 var_emp_id number(6) = 1116; 
BEGIN
 SELECT salary 
 INTO var_salary 
 FROM employee 
 WHERE emp_id = var_emp_id; 
 dbms_output.put_line(var_salary); 
 dbms_output.put_line('The employee ' 
  	|| var_emp_id || ' has  salary  ' || var_salary); 
END; 
/
NOTE: The backward slash '/' in the above program indicates to execute the above PL/SQL Block.     
