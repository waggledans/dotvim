= language =

* pass
* generator, yield
* callable
    callable(function) => True
* with .. as
  http://effbot.org/zone/python-with-statement.htm
= scope =
LEGB rule: Local Scope, Enclosing Scope, Global Scope, and Built-in Scope. 
* global declaration makes function to look for a variabe in global scope
    global name
* nonlocal declaration makes function to look for a variabe in enclosing scope (it start in innermost and proceeds till the binding is found)
    nonlocal name
* in either global or nonlocal  python will throw SyntaxError if the variable name isnt foun    
= data types =
boolean True, False
integer, long, float, string, list, tuple, dictionary
object, None, array
== datetime module types ==
* https://docs.python.org/2/library/datetime.html
    datetime.date(2014,month=1,day=6)
    datetime.date.fromtimestamp(100000000)
    d = datetime.date.today() # d.year, d.month, d.weekday (d.isoweekday), d.isoformat() -> '2012-09-02', d.strftime('%A %d %B %Y') -> 'Thursday 27 February 2012'
= network / sockets =
http://www.tutorialspoint.com/python/python_networking.htm
s = socket.socket (socket_family, socket_type, protocol=0)
  socket_family = {AF_UNIX, AF_INET}
  socket_type = {SOCK_STREAM or SOCK_DGRAM}
  * example
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
    sock.bind((host, port or 0))
    sock.listen(5)
= loops, conditionals =
* chained relational operators
    instead of a<b and b < c   use a<b<c in if statement
= tuples =
# tuples are immutable, ordered.
# len (some_tuple) 
# index (tuple’s element) will return index of the element
# tuples can be indexed from the right some_tuple[-4]  would return the 4th from the right
# some_tuple.count(some_element) will return the number of the elements in the tuple
# search
# in		#’something’ in tuple_name  will return True or False
bool = True
name = "Craig"
age = 26
pi = 3.14159
print(name + ' is ' + str(age) + ' years old.')
#
a = 1
b = 2
def Sum():
   global a, b
   b = a + b
Sum()
print(b)
== named_tuple ==
>>> # Basic example
>>> Point = namedtuple('Point', ['x', 'y'])
>>> p = Point(11, y=22)     # instantiate with positional or keyword arguments
>>> p[0] + p[1]             # indexable like the plain tuple (11, 22)
33
>>> x, y = p                # unpack like a regular tuple
>>> x, y
(11, 22)
>>> p.x + p.y               # fields also accessible by name
33
>>> p                       # readable __repr__ with a name=value style
 =>  Point(x=11, y=22)
= FUNCTIONS =
def g(x):
    " This is the function doc"
    return x**4/4.0 - x**3/3.0 - 3 * x * x
print(g(6))
== function dunder attributes ==
 * functionName.__name__     # returns the name of the function
 * functionName.__doc__     # returns the name of the function
== keyed functions can passed as an argument ==
def Last(x):
  return x[-1]
sorted(some_list,key=Last)

== function factories ==
    def raise_to(exp):
        def raise_to_exp(x)
            return pow(x, exp)
        return raise_to_exp    
== decorators ==
 * decorator function - must return a function that would receive the function being decorated as an argument
    def escape_unicode(f):
        def wrap(*args, **kwargs):
            x = f(*args, **kwargs)
            return ascii(x)
        return wrap
   
   @escape_unicode
   def nothern_city:
    return 'Tromsø'
 * decorator class
    class CallCount:
        def __init__(self, f):
            self.f = f
            self.count = 0

        def __call__(self, *args, **kwargs):
            self.count += 1
            return self.f(*args, **kwargs)

    @CallCount
    def hello(name):
        print('Hello, {}'.format(name))
    # now run hello("Some name"), hello("some other name") and then hello.count to see how many the funciton has been called  
 * decorator instance
    # The advantage of using instance (and not class) is that some instances could enabled/disabled as in example below
    class Trace:
        def __init__(self):
            self.enabled = True

        def __call__(self, f):
            def wrap(*args, **kwargs):
                if self.enabled:
                    print('Calling {}'.format(f))
                return f(*args, **kwargs)
            return wrap

    tracer = Trace()

    @tracer
    def rotate_list(l):
        return l[1:] + [l[0]]
 * decorating methods is done just like decorating functions
 * functools.wrap()
    import functools
    def wrapper_func(f)
        @functools.wraps(f)
        def wrapper(f)
            # do stuff
            return f()
        return wrapper    
 * duck-tails validating arguments - here the return value of check_non_negative is actual decorator (here, validator function is kind of nested)
    def check_non_negative(index):
        def validator(f):
            def wrap(*args):
                if args[index] < 0:
                    raise ValueError(
                        'Argument {} must be non-negative.'.format(index))
                return f(*args)
            return wrap
        return validator
    # using validator function
    @check_non_negative(1)
    def create_list(value, size):
        return [value] * size
= EXCEPTIONS =
 * built-in exceptions:
    https://docs.python.org/3/library/exceptions.html
   **   IOError  # when open the file:
        try:
            fh = open("file_name")
        except IOError as e:
            print(e)
   **   ValueError
   **   ZeroDivisionError
        try:
            top = int(input("Please enter the denominator:"))
        except ValueError: # This try-except catches only ValueErrors 
            print ("You didn't enter an integer.")
            exit(0)
        except ZeroDivisionError: # This try-except catches only zero division 
        except:                   # This try-except catches everything
 * custom exceptions       
== measure time with timeit ==
    * from timeit import timeit (first arg is where the module is, the second is name of the method to report cpu time for)
        timeit(setup="from __main__ import resolve", stmt="resolve('python.org')")
= strings = 
* String Slicing
  s = "Go Gators! Come on Gators!"
  x = s[0]  # x = "G" or  x = s[3:9] #x = "Gators" or x = s[:2] #x = "Go" or x = s[19:] #x = "Gators!"
* count substring occurances
  x = s.count("Gator") #x = 2
* endswidth(sub [,start[,end]]): returns true if the string ends with the substr:
  x = s.endswith("Gators") #x = False
int find(sub [,start[,end]]): returns the numeric position of the first occurance of sub in the string. Returns -1 if sub is not found.
  x = s.find("Gator") #x = 3
  x = s.find("gator") #x = -1
* join / split
string join(array): combines elements of the string array into a single string and returns it. 
The separator between elements is the string providing this method.
  a = ['abc','def','ghi']sys.arg
  t = "--"
  x = t.join(a) #x = abc--def--ghi 
  '\n'.join(a)	# 'abc\ndef\nghi\n'
array split([sep [,maxsplit]]): splits a single string into a string array using the separator defined. If no separator is defined, whitespace is used. Consecutive whitespace delimiters are then treated as one delimiter. Optionally you can specify the maximum number of splits so that the max size of the array would be maxsplit+1.
  a = s.split() #a=['Go', 'Gators!', 'Come', 'on', 'Gators!']
* other string functions 
  x = len(s) #x = 26
  print s.lower() #go gators! come on gators!
  print s.upper() #GO GATORS! COME ON GATORS!
string replace(old, new [,count]): returns a copy of the string with all occurances of old replaced by new. If the optional count argument is given, only the first count occurances are replaced.
  x = s.replace("Gators","Tigers",1) #x = Go Tigers! Come on Gators!
int rfind(sub [,start[,end]]): same as find but returns the numeric position of the last occurance of sub in the string.
  x = s.rfind("Gator") #x = 19
boolean startswidth(sub [,start[,end]]): returns true if the string starts with the specified substring and false otherwise:
  x = s.startswith("Go") #x = True
string strip([chars]): returns a copy of the string with leading and trailing characters removed. If chars (a string) is not specified, leading and trailing whitespace is removed.
  line.rstrip()   strips trailing whitespace
* formated strings or print with formated strings
ame = 'marcog'
number = 42
print '%s %d' % (name, number)    # in python2
 *   print("{0} was found {1} times because {0} is there".format(word, count)) # in python3
 *   "{a} smth {b}".format(a="Oslo", b="Stavanger")
# first define dictionary
# these strings below expect a dictionary after
# "something %(key_name)s blah-blah" % dictionary
LIGHT_MESSAGES = {
    'English': "There are %(number_of_lights)s lights.",
    'Pirate':  "Arr! Thar be %(number_of_lights)s lights." #this string expects a dictionary
}
def lights_message(language, number_of_lights):
    return LIGHT_MESSAGES[language] % locals()
= regex = 
* re.search
    if re.search('(Len|Neverm)ore', line):
            print(line, end='')   # end is set to nothing cause the line already has newline char
* Group matching
>>> import re
>>> match = re.match('Hello[ \t]*(.*)world', 'Hello Python world') >>> match.group(1)   ==> 'Python '
    if (match): print (match.group())
* replace/sub
    re.sub("(Len|Neverm)ore", "###", line)
    # or
    re.search([[]] line)
    line.replace(match.group(), '###')
* reuse pattern
    pattern = re.compile("(Len|Neverm)ore", re.IGNORECASE)
    re.search(pattern, line)
= HASH DICTIONARY = 
adict = {}
adict["one"] = "uno"
adict = {‘one’:’uno’, ‘two’:’dos’}
print (adict[‘one’])	  # -> uno
* the problem with adict[‘one’] is that it will return error if not defined
* adict.get('one') will return None if not defined
adict.keys()
keys = sorted(adict.keys()) # sorted keys
adict.values()
adict.items()		      # returns tuples (key, value)
if 'key' in adict:     # check that the key is in the hash  
len (adict)	#will return the number of pairs, 2 in this case
adict.pop(‘two’)		#will pop the pair with the key ‘two’
del adict('one')  # deletes key-value pair from the dictionary
* iterating over the dictionary:
  * for key in adict:
  * for key in adict.keys():
  * for key, value in adrict.items():
= LIST ARRAY =
* declare
result_list = list()
== shallow copy vs deep copy ==
* shallow copy:
a = [1, 2, 3]
b = a
b[0] = 4  #a[0] also becomes 4
* deep copy:
b = a[:]
== append,count,extend,index,insert,pop,remove,reverse,sort,del,sorted, index ==
["foo", "bar", "baz"].index('bar')      => 1
some_list.remove (element_name)
some_list.insert (2, element_name)		# insert some_element to position indexed 2
some_list.del(2)      # delete element with index 2
some_list.sort ()
 * sorted accepts lambda func (to use for sorting) as an argument
    sorted(some_list_of_names, key=lambda name: name.split()[-1])
    sorted(some_list)
    sorted(some_list, reverse=True)
    sorted(some_list,key=len) # using key function
some_list.reverse ()
list = [2, 4, 7, 9]
list2 = [3, "test", True, 7.4]
a = range(5) #a = [0,1,2,3,4]
a = range(10,0,-2) #a = [10,8,6,4,2]
#An empty list can be init with [] and then the append command can be used to append data :
a=[]
a.append("test")
a.append(5)
print a
-> ['test', 5]
Finally, if you want a list to have a predetermined size- create a list and fill it with None's:
    a=[None]*length
    a[5] = "Fifth"
    a[3] = 6
    print len(a)
    -> 10
    print a
    -> [None, None, None, 6, None, 'Fifth', None, None, None, None]
# Removing from lists: The pop method can be used to remove any item from the list:
a.pop(5)
print a
-> [None, None, None, 6, None, None, None, None, None]
Creating arrays: using one of four procedures: zeros, ones, arange, or array.:
a = zeros(5) #a=[0 0 0 0 0]	# zeros creates an array of a specified size containing all zeros
a = ones(5) #a=[1 1 1 1 1] #ones similarly creates an array of a certain size containing all ones:
arange works exactly the same as range, but produces an array instead of a list:
a = arange(10,0,-2) #a = [10 8 6 4 2] 
array = lists it appears but one can convert list to array using array command
a = [1, 3, 9] #create a list and append it
a.append(3)
a.append(5)
print a
-> [1, 3, 9, 3, 5]
a = array(a)	#converts a list to an array
print a
-> [1 3 9 3 5]
Multi-dimensional lists: Because Python arrays are actually lists, you are allowed to have jagged arrays. Multi-dimensional lists are just lists of lists:
a=[[0,1,2],[3,4,5]]
print a[1]
-> [3, 4, 5]
s = ["Lee", "Walsh", "Roberson"]
s2 = ["Williams", "Redick", "Ewing", "Dockery"]
s3 = [s, s2]
print s3[1][2]
-> Ewing
Multi-dimensional arrays: However, numarray does support true multi-dimensinoal arrays. These can be created through one of five methods: zeros, ones, array, arange, and reshape. zeros and ones work the same way as single dimensions except that they take a tuple of dimensions (a comma separated list enclosed in parentheses) instead of a single argument:
a = zeros((3,5))
a[1,2] = 8
print a
-> [[0 0 0 0 0]
	[0 0 8 0 0]
	[0 0 0 0 0]]
b = ones((2,3,4)) #create a 2x3x4 array containing all ones.
array works the same way as for 1-d arrays: you can create a list and then convert it to an array. Note with multi-dimensional arrays though, trying to use array to convered a jagged list into an array will cause an error. Lists must be rectangular to be able to be converted to arrays.
s = ["Lee", "Walsh", "Roberson", "Brewer"]
s2 = ["Williams", "Redick", "Ewing", "Dockery"]
s3 = [s, s2]
s4 = array(s3)
print s4 + "test"
-> [['Leetest', 'Walshtest', 'Robersontest', 'Brewertest'],
	['Williamstest', 'Redicktest', 'Ewingtest', 'Dockerytest']]
print s4[:,1:3]
-> [['Walsh', 'Roberson'],
	['Redick', 'Ewing']]

= locals globals =
http://www.diveintopython.net/html_processing/locals_and_globals.html
# locals returns dictionary of name,value of local to function variables
def unknown_starttag(self, tag, attrs):
    strattrs = "".join([' %s="%s"' % (key, value) for key, value in attrs])
    self.pieces.append("<%(tag)s%(strattrs)s>" % locals())
# the function above requires an explanation perhaps, see string formatting above
if __name__ == "__main__":
    for k, v in globals().items():             1
        print k, "=", v
= conditionals =
 * if ..: elif: ... else ..
 * result = true_value if condition else false_value  # smth like in C (cond):a?b
    
= LOOPS =
s = input("Please type some characters and press enter:")
while test < num:
    do_stuff()
else:
    do_other_stuff()
for c in s:
    print(c)
print("Done")
for word in s.split():
    print(word) 
print("Done")

= MODULE =
== defining packages ==
 * first create directory and in it create __init__.py
  * install module BeautifulSoup using pip
sudo python -m pip install BeautifulSoup
https://docs.python.org/2/tutorial/modules.html
* good way to import modules:
    try:
        from setuptools import setup
    except ImportError:
        from distutils.core import”

* import module_name # no .py extension
  import reader
  reader.__file__   # will return /full/path/to/file.py
  reader.__name__  # will return string 'reader'
* to import specific function into local namespace do:
  from reader import read_func  
'/Users/dans/Programming/workspace_luna/Python3Training/advanced/reader/reader/reader.py'
* execute module # unlike import that executes module in its namespace, exec overides local vars
exec(open('script1.py').read())
* import sys
  - sys.argv is equivalent to $@ in bash (or @ARGV in perl)
  - argv[0] is a script name
Perl:   ($script, $first, $second, $third) = @ARGV; 
Python: script, first, second, third = argv
* FindBin equivalent
import os
import sys
bindir = os.path.abspath(os.path.dirname(sys.argv[0]))
* from fibo import fib1 ## allows instead of fibo.fib1() run fib1()
= IO operations =
= print =
 * print to stderr
    print >>sys.stderr, 'Poem failed:', err
 * print string with placeholders / formatters   
    print 'Task %d: %d bytes of poetry' % (i, len(self.poems[i])) 
    print "Let's talk about %s." % my_name
    print "He's %d pounds heavy." % my_weight
== files ==
 * 
    catfile = open(filename,"r")
    for line in catfile: 
        print(line)
 * using open/readlines
lines = catfile.readlines()	# like perl @lines = <catfile>
line = catfile.read()		# like perl $lines = <catfile>
catfile.close()
outfile = open(filename,"w")
outfile.write("Hello " + yourName + ". How are you?\n") 
outfile.write("Next year you will be "+str(age+1) +" years old\n") 
outfile.close()
== stdin ==
* the simplest way:
age = raw_input("How old are you? ")
age = input("how old are you? ")
*
import fileinput
for line in fileinput.input():
    pass
*
for line in sys.stdin:
    print line
== path manipulations ==
http://docs.python.org/2/library/os.path.html
os.path.expanduser("~dans")     #/home/dans
os.path.split(path)             # splits path to head and tail => (head, tail)
os.path.isfile(path)
os.path.isdir(path)
os.path.islink(path)
os.path.join(path1[, path2[, ...]])
os.path.realpath(path)
os.path.split(os.path.abspath("."))[0]      # the current path "." is expanded to /Users/derek/work, so head is '/Users/derek' and tail is 'work'


=== sys.path adding dirs to the search path ===
 * sys.path[0] is ''   which is equivalent to the current directory
 * Python looks for modules in directories listed in sys.path. Therefore to add a new dir to search path need to: 
import sys
sys.path.append("/home/me/mypy")
 * another way would be by defining PYTHONPATH env variable

== Executing shell commands ==
Execution: os.system('ls -l')
#Requires import os
* execute shell command AND read its output
http://stackoverflow.com/questions/4760215/running-shell-command-from-python-and-capturing-the-output
import subprocess
p = subprocess.Popen(['ls', '-a'], stdout=subprocess.PIPE,  stderr=subprocess.PIPE)
out, err = p.communicate()
print out
def runProcess(exe):    
    p = subprocess.Popen(exe, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
    while(True):
      retcode = p.poll() #returns None while subprocess is running
      line = p.stdout.readline()
      yield line
      if(retcode is not None):
        break
= yield =
http://www.jeffknupp.com/blog/2013/04/07/improve-your-python-yield-and-generators-explained/
= OOP / object oriented python / class =

== metaclasses ==
http://stackoverflow.com/questions/100003/what-is-a-metaclass-in-python
 * function type is in fact a metaclass
 * using type to create class dynamically
    class Foo(object):
        bar = True          # equiv to Foo = type('Foo', (), {'bar':True})
    class FooChild(Foo):
        pass                # FooChild = type('FooChild', (Foo,), {})
== constructors ==

 * "regular"
        def __init__(self, data):
            "Initialize MyData from a sequence"
            self.data = data
 * good practice constructor
        def __init__(self, *args):
            numargs = len(args)
            if numargs < 1: raise TypeError('requires at least one arg')
            elif numargs == 1:
                pass
            elif numargs == 2:
                pass
            else:
                raise TypeError('too many args, received {}'.format(numargs))
                
 * keyword arguments  (dictionaries)
        def __init__(self, **kwargs):
            self.color = kwargs.get('color', 'white') # white is a default value
   donald = Duck(color='blue)         # or donald = Duck()  # white donald
 * combine keyword arguments with list arguments
    def testfunc (this, that, other, *args, **kwargs):      # call it with testfunc(1,2,3,4,4,5,6,5, par1=2, part2=6)
 * getters/setters for ALL members saved in dictionary
        class PolymorphicDuck:
            def __init__(self, **kwargs):
                self.variables = kwargs
            def quack(self):
                print('Quaaack!')
            def set_variable(self, key, value):
                self.variables[key] = value
            def get_variable(self, key):
                return self.variables.get(key, None)
 
== dunder methods / special member methods ==
 * __init__  (called after __new__)
 * __del__    (called when obj is garbage collected)
   def __del__(self):
        self.file.close()
        del self.file
 * iterator method makes class iterable: __iter__
    def __iter__ (self):     # class can be iterated upon in for koop, as in: for i in some_class(2, 100, 5):
        i = self.lower
        while(i <= self.upper):
            yield i
            i += self.step
 * modifying method callable property using __call__ (making instance callable)
    class Foo:
      def __call__(self):
        print 'called' 
    foo_instance = Foo()
    foo_instance() #this is calling the __call__ method    
     ** remember the state between the calls using __call__ function and object __cache__
        class Resolver:
            def __init__(self):
                self._cache = {}
            def __call__(self, host):
                if host not in self._cache:
                    self._cache[host] = socket.gethostbyname(host)
                return self._cache[host]
            def clear(self):
                self._cache.clear()
            def has_host(self, host):
                return host in self._cache
 * dunder closure method: __closure__
    def enclosing()
        x = "Im in enclosing"
        def local_func(y)
            print(x + ',' + y + "is enclosing");
        return local_func()
    lf = enclosing()    # here if we run lf.__closure__  we will get reference to enclosed var x
    lf("lf function") # => Im in enclosing, lf function is enclosing 
 * __str()__  __repr()__  __format()__
    * when repr and str are defined for objects:   str(obj) or repr(obj) will the return object string representation
    * format calls str() by default, unless r! is specified - as in '{r!}'.format(someObject)
    def __format__ (self, f):
        return 'Formatted point ({}, {}, {})'.format(self.x, self.y, f)
    def __str__(self):
        return '({}, {})'.format(self.x, self.y)
    def __repr__(self):
        return 'Point2D(x={}, y={})'.format(self.x, self.y)
            
    
== staticmethod / classmethod ==
 * examples are below
 * http://stackoverflow.com/questions/136097/what-is-the-difference-between-staticmethod-and-classmethod-in-python
 * bottom line: staticmethod doesnt know anything about containing class or instance and used just to add methods to class if they logically belong there
 * classmethods are used for constructor overloading (for example) - see below
== attributes ==
 * class attributes (ie class variables) are defined just as methods
    import iso6346
    class ShippingContainer:
        HEIGHT_FT = 8.5
        WIDTH_FT = 8.0
        next_serial = 1337 # can be referenced by ShippingContainer.next_serial
        @staticmethod
        def _make_bic_code(owner_code, serial):
            return iso6346.create(owner_code=owner_code, serial=str(serial).zfill(6))
        @classmethod
        def _get_next_serial(cls):
            result = cls.next_serial
            cls.next_serial += 1
            return result
 * @property method built-in decorator
        def __init__(self, owner_code, length_ft, contents, celsius):
        super().__init__(owner_code, length_ft, contents)
        self.celsius = celsius
    @property
    def celsius(self):          # this method will be called inst.celsius (read only)
        return self._celsius
 * creating setter using @property       
    @celsius.setter
    def celsius(self, value)
        if value > RefrigeratedContrainer.MAX_CELSIUS:
            raise ValueError("Temperature is too hot!")
        self._value = value
 * @property method could be override by inherited class
    ** note that setter decorator is different
    use super() function:
    @property
    def celsius(self):
        return super().celsius + some_value
    @ParentClass.celsius.setter
    def celsius(self, value)
        # do stuff
        # Note that to refer to Parent class setter use: ParentClass.celsius.fset(super, value) and not super() # some python's quirck
== abstract classes in python (or template methods) ==
    class AbstractClass:
        def template_method(self):
            self._part1()
            self._part2()
            self._part3()
        def _part2(self):
            raise NotImplementedError("Override this method")
        def _part3(self):
            # Optionally override this
            print("Done!")
           
    class ConcreteClass(AbstractClass):
        def _part1(self):
            print("About to perform action")
        def _part2(self):
            perform_action()
        def _part3(self):
            print("Action performed!")


== constructor overloading using factory (@classmethod) ==
>>> class MyData:
...     def __init__(self, data):
...         "Initialize MyData from a sequence"
...         self.data = data
...     @classmethod
...     def fromfilename(cls, filename):
...         "Initialize MyData from a file"
...         data = open(filename).readlines()
...         return cls(data)
...     
...     @classmethod
...     def fromdict(cls, datadict):
...         "Initialize MyData from a dict's items"
...         return cls(datadict.items())
... 
>>> MyData([1, 2, 3]).data
[1, 2, 3]
>>> MyData.fromfilename("/tmp/foobar").data
['foo\n', 'bar\n', 'baz\n']
>>> MyData.fromdict({"spam": "ham"}).data
[('spam', 'ham')]
== Inheritance ==
 * number of ways to call base class:
    * super(ChildClass, self).__init__()
    * BaseClass.__init__(self)
class Shape:
  def __init__(self):
    self.color = "blue"
class Circle(Shape):  # inherited class
  def __init__(self, r):
    Shape.__init__(self)
    self.radius = r
  def calcDiameter(self):
    return self.radius * 2
== Polymorphism / Overiding ==
  * Python uses "duck" typing ie it quacks like a duck, it is a duck
  * So polymorphism is natural:
== generator ==
http://www.jeffknupp.com/blog/2013/04/07/improve-your-python-yield-and-generators-explained/
=== yield ===

= testing =
== unittest ==
        import unittest
        from mock import patch
        def a(n):
            if n > 10:
                b()
        def b():
            print "test"
        class MyTestCase(unittest.TestCase):
            @patch('__main__.b')
            def test_b_called(self, mock):
                a(11)
                self.assertTrue(mock.called)
            @patch('__main__.b')
            def test_b_not_called(self, mock):
                a(10)
                self.assertFalse(mock.called)
        if __name__ == "__main__":
            unittest.main()
== nose ==
== py.test ==
== mock == 
 * mock.patch replaces the class with a mock object and lets you work with the mock instance. Take a look at this snippet:

    >>> class MyClass(object):
    ...   def __init__(self):
    ...     print 'Created MyClass@{0}'.format(id(self))
    ... 
    >>> def create_instance():
    ...   return MyClass()
    ... 
    >>> x = create_instance()
    Created MyClass@4299548304
    >>> 
    >>> @mock.patch('__main__.MyClass')
    ... def create_instance2(MyClass):
    ...   MyClass.return_value = 'foo'
    ...   return create_instance()
    ... 
    >>> i = create_instance2()
    >>> i
    'foo'
    >>> def create_instance():
    ...   print MyClass
    ...   return MyClass()
    ...
    >>> create_instance2()
    <mock.Mock object at 0x100505d90>
    'foo'
    >>> create_instance()
    <class '__main__.MyClass'>
    Created MyClass@4300234128
    <__main__.MyClass object at 0x100505d90>
    patch replaces MyClass in a way that allows you to control the usage of the class in functions that you call. Once you patch a class, references to the class are completely replaced by the mock instance.

    mock.patch is usually used when you are testing something that creates a new instance of a class inside of the test.  mock.Mock instances are clearer and are preferred. If your self.sut.something method created an instance of MyClass instead of receiving an instance as a parameter, then mock.patch would be appropriate here.
    
    * further use
      @patch.object(aw, 'Clear') can become:
        import mock

        def testClearWasCalled(self):
            aw = aps.Request("nv1")
            with patch.object(aw, 'Clear') as mock:
                aw2 = aps.Request("nv2", aw)
            mock.assert_called_with(42) # or mock.assert_called_once_with(42)`
 
= zope.interface =
 *  class implements an interface and instances of that class provide the interface
= twisted =
 *  reactor.callWhenRunning(hello)  - call immeidately after reactor.run()
 * reactor.callLater(1, self.count) - call after 1 sec
 * reactor.connectTCP(host, port, protocolFactory)
== interfaces ==
 * ILoggingContext(Interface):   # def logPrefix(): returns a string, used as prefix for log messages
 * class IFileDescriptor(ILoggingContext):   # def fileno(), def connectionLost(reason),
 * class IReactorFDSet(Interface): # to be able to use L{FileDescriptor<twisted.internet.abstract.FileDescriptor>} 
    addReader, removeReader... require argument implementing IReadDescriptor interface
 * class IReadDescriptor(IFileDescriptor) /  IWriteDescriptor(IFileDescriptor) : # doRead() or doWrite() methods   
 * class ITransport(Interface)  abstracts TCP connection
    * write(data), loseConnection(), getPeer(), getHost()
 * IProtocol - FTP, IMAP...
    * makeConnection, dataReceived, connectionLost, connectionMade 
 * IProtocolFactory
    * buildProtocol, doStart, doStop 
