= Basics =
Collection  ~ Table
Document    ~ record/row
Field       ~ RDBMS column  {key:value}
= import / export =
mongoexport -d myApp -c users --out user_data.json
mongoexport --host prod-db.avu.com  --port 27017 --collection majors_temp --db mars_clear  --out /tmp/mongotmp/majors.json
mongoimport -d myApp -c users --out user_data.json
mongoimport --host prod-db.abu.org  --port 27017 --collection majors_temp --db mars_clear  --file /tmp/mongotmp/majors.json 
mongodump 
mongorestore -d myApp ./dump/myApp
bsondump dump/myApp/users.bson > users.json
mongostat

= BSON =

= quick start =
> show dbs
local	0.078125GB
> use bookmarks
switched to db bookmarks
> db bookmarks
> db.links.insert({title: "Tuts+ Premium", url: "http://tuts.com" })
> db.links.count()
1
> var doc = {};
> doc.tite = "Nettuts+";
Nettuts+
> doc.comment = 'best tutorials on the web';
best tutorials on the web
> doc.tags=["tutorials", "web dev"];
[ "tutorials", "web dev" ]
> doc.saved_on = new Date
ISODate("2015-05-24T03:59:51.035Z")
>db.links.save(doc)   #this one checks if the document exist
                      # if it does it calls db.links.update else  db.links.insert
>db.links.find().forEach(printjson);
= _id =
is unique object generated by mongoDB.
one way to generate it is using function counter(name) :
>db.products.insert({_id: counter("products"), name: "product1"});
== getting document creation time  ==
>db.links.find()[0]._id.getTimestamp()

== getting document creation time  ==
>db.users.insert({name: "Dan"})
>var auser = db.users.findOne({name: "Dan"})
> a._id       // will return the document _id

= example =
db.users.drop()
db.links.drop()
db.users.insert({
    name: { first: "John", last: "Doe"},
    age: 30,
    email: 'johndoe@hotmail.com',
    passwordHash: 'some_password_hash',
    logins: {
        {at: new Date(2012, 3, 4, 5,6, 7), minutes: 20},
        {at: new Date(2012, 3, 15, 16,17, 18), minutes: 18},
        {at: new Date(2012, 4, 1, 2,3,4), minutes: 34}
    }
});
db.users.insert({
    name: { first: "Jane", last: "Doe"},
    age: 25,
    email: 'janedoe01@hotmail.com',
    passwordHash: 'another_password_hash',
    logins: {
        {at: new Date(2012, 5,6, 7, 8, 9), minutes: 15},
        {at: new Date(2012, 3, 15, 16,17, 18), minutes: 18}
    }
});

= queries =
db.user.find({email: 'johndoe@gmail.com'}).forEach(printjson);
db.user.find({email: 'johndoe@gmail.com'}).limit(2)         // return only first 2 documents
db.user.find({email: 'johndoe@gmail.com'}).skip(2)          // return all but the first 2 documents
db.user.find({email: 'johndoe@gmail.com'}).sort({lastName: 1})     // sort the output by lastName in ascending order
db.user.find({email: 'johndoe@gmail.com'}).sort({lastName: -1})     // sort the output by name in descending order
db.user.find({email: 'johndoe@gmail.com'}).sort({lastName: 1, firstName: 1})     // sort the output by lastName in ascending order
                                                                                  // and then by firstName
WRONG: db.user.find({email: 'johndoe@gmail.com'}).name;
RIGHT: db.user.findOne({email: 'johndoe@gmail.com'}).name;
db.user.find({email: 'johndoe@gmail.com'}).forEach(printjson);
# to see only certain fields:
db.user.find({email: 'johndoe@gmail.com'}, {title: 1, url: true});
db.user.find({email: 'johndoe@gmail.com'}, {title: 0, url: false});
 * "greater than"/"less than" query
 **  $gt, $lt, $gte, $lte, $ne
    db.links.find({favourites: { $gt: 50}}, {title: 1, favourites:1 , _id: 0});
    db.links.find({favourites: { $gt: 100, $lt: 300}}, {title: 1, favourites:1 , _id: 0});
 * match one of several values $in (or the opposite don't match $nin)   
    db.links.find({'name.first': { $in: ["John", "Jane"]}}, {name:1, title: 1, favourites:1 , _id: 0});
 * $or, $and, $nor, $and, $nand
    db.links.find({ $or: [{'name.first': "John"}, {{'name.last': "Wilson"}]});
 * $exists, 
    db.links.find({ email: {$exists: true }, { name: 1});
 * $elemMatch, $where
    db.users.find({ $where: 'this.name.first === "John"' });
 * db.links.distinct('url')   will show distinct fields only
 * db.links.group({ 
    key: { userId: true},
    initial: {favCount: 0},
    reduce: function (doc, o) {o.favCount += doc.favourites;},
    finalize: function (o) {o.name = db.users.findOne({_id: o.userId}).name;});
 });

 == regex ==
  db.links.find({title: /tuts\+$/});
  or 
  db.links.find({title: {$regex: /tuts\+$/, $ne: "MobileTuts+"}});
 * using variable:
  db.links.find({id: new RegExp("^mj:" + e.majorcode +"__[1-9]$")}
  
= update =
== update existing document (ie replace it) ==
var dave_document = db.customers.findOne({firstName: "Dave"});
// add new fields or modify old ones
dave_document.email = 'dave@gmail.com';
// replace existing record with the new one
db.customers.update({firstName: "Dave"}, dave_document);
===  edit existing fields in the document using $set or $unset ===
db.books.update({title:"core java"},{$set: {pages: 245});
db.books.update({title:"core java"},{$unset: {pages: 245});
// or add a new key to all documents found:
// false means dont create a new doc (see the next example)
// true means apply to all found basically
db.books.update({title:"core java"},{$set: {pages: 245}, false, true);
// can also update number of keys:
db.books.update({title:"core java"},{$set: {pages: 245, author: author_name}, false, true);

=== update a document or create new one if doesnt exist ===
// just add one more parameter
db.customers.update({firstName: "Dave"}, dave_document, true);
=== increment numberical value ===
// let's say we want to increment "favourites" field by 5
// first we need to find the document:
var n = {title: "Nettuts+"}
// then increment using $inc operator
db.links.update(n, {$inc: {favourites: -5}});
=== findAndModify can return updated object ===
// use new: true  to get the updated object
// use new: false (default)  to get the outdated object
document.users.findAndModify(
    query: {name: "Kate Wills"}, 
    update: {$set: {age:20}}, 
    new: true
);
==== findAndModify more complicated example ====
document.users.findAndModify(
    query: {favourites: 110}, 
    update: {$inc: {favourites:10}}, 
    sort: {title: 1},   // sort ascend by title
    new: true,
    fields: { title: 1, favourites: 1, _id: 0}
);
=== update array field ===
==== push ====
var n = {title: "Nettuts+"}
db.links.update(n, {$push: {tags: 'blog'}});
db.links.update(n, {$pushAll: {tags: [ 'one', 'two']}});
==== addToSet ====
adds uniquely (ie only adds if the value doesnt exist)
semantics is just like $push
to add multiple values to set however:
db.links.update(n, {$addToSet: {tags: {$each: [ 'one', 'two']}}});
==== pull, pullAll ====
the opposite of push/pushAll
=== $rename operator renames field's key ===
db.users.update( {random: true}, {$rename: { 'random': 'newName'}} );

= index =
> db.links.find({title: 'Nettuts+}).explain();
"cursor" : "BasicCursor"  - means didnt use indexes
if we search _id (which is indexed):
  could be "BtreeCursor _id_"   - btree is indexing algorithm
"n": 1                    - number of values returned
> db.links.ensureIndex({title: 1});  // ascending indexing of the field 'title'
> db.links.ensureIndex({title: 1}, {unique: true });  // make sure the index is unique
> db.links.ensureIndex({title: 1}, {unique: true, dropDups: true });  // get rid of duplicates
== compound index ==
db.links.ensureIndex({title: 1, url: 1} );
== delete index ==
db.system.indexes.find();
db.links.dropIndex("title_1_url_1");    // just dropped compound index from the prev example

= MongoDB java driver =
Mongo connection = new Mongo();
DB db = connection.getDB(“inventory“);
DBCollection products = db.getCollection(“products“);
...
== com.mongodb.Mongo Class ==
instantiate Mongo class without passing any argument 
Mongo new object will try to connect localhost at port 27017.
== com.mongodb.DB Class ==
Each database is represented using an object instantiated
from the com.mongodb.DB class
== com.mongodb.DBCollection Class ==
== com.mongodb.DBObject Class ==
BasicDBObject doc = new BasicDBObject(); 
doc.put(“firstname“,“mike“); 
doc.put(“tel“,“0546655837“);

BasicDBObject address = new BasicDBObject();
address.put(“street“,“goshen“);
address.put(“number“,43);
address.put(“city“,“jerusalem“);
address.put(“country“,“israel“);
doc.put(“address“, address);
== Demo ==
import com.mongodb.Mongo;
import com.mongodb.DB;
import com.mongodb.DBCollection;
import com.mongodb.DBCursor;
import com.mongodb.BasicDBObject;
public class MongoDBDemo {
    public static void main(String args[]) {
        try {
            Mongo mongo = new Mongo();
            DB db = mongo.getDB("inventory");
            DBCollection products = db.getCollection("products");
            BasicDBObject doc = null;
            //creating 1st document
            doc = new BasicDBObject();
            doc.put("name","tabolax");
            doc.put("price",3432.99);
            products.insert(doc);
            //creating 2nd document
            doc = new BasicDBObject(); doc.put("name","charoxa"); doc.put("price",880.99);
            products.insert(doc);
            //creating 3rd document
            doc = new BasicDBObject(); doc.put("name","sofafa"); doc.put("price",2880.99);
            products.insert(doc);
            DBCursor cursor = products.find();
            while(cursor.hasNext()) {
                System.out.println(cursor.next());
            }
        } catch(java.net.UnknownHostException e) {
            e.printStackTrace();
        }
    }
}
