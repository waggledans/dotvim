= synchronized =
    * could be on method: 
        public synchronized void increment() {
            count++;
        }
    * or on object
    private Object lock1 = new Object();
    private Object lock2 = new Object();
    public void stageOne() {
        synchronized (lock1) {
            try { Thread.sleep(1);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                } list1.add(random.nextInt(100));
    }}
The difference between the two is that method lock locks the whole class instance and oject lock locks just the block    
= ReentrantLock =
*  Basically has lock.lock(), lock.unlock() and cond.await(), cond.signal() 
    private Lock lock = new ReentrantLock();
    private Condition cond = lock.newCondition(); // Condition object is instanced by Lock object
* lock.await()  releases the lock and waits for a signal from another thread (cond.signal()).
                Having received it, the thread reaquires the lock and continues
* in my understanding signal() should be called AFTER unlock() but I need to verify it
* lock.tryLock() returns boolean and does as the name says : it is nonblocking   TODO::VERIFY THIS

* may be used to implement a monitor
http://baptiste-wicht.com/posts/2010/09/java-concurrency-part-5-monitors-locks-and-conditions.html
* always unlock in finally block to avoid object being locked
Private Lock lock = new ReentrantLock()
/**
 * Source: http://www.journaldev.com/2377/java-lock-example-and-concurrency-lock-vs-synchronized</em>
 * This is the base interface for Lock API. It provides all the features
 * of synchronized keyword with additional ways to create different Conditions
 * for locking, providing timeout for thread to wait for lock. Some of the
 * important methods are {@link java.util.concurrent.locks.Lock#lock()} to
 * acquire the lock, {@link java.util.concurrent.locks.Lock#unlock()} to release
 * the lock, {@link java.util.concurrent.locks.Lock#tryLock()} to wait for lock
 * for a certain period of time,
 * {@link java.util.concurrent.locks.Lock#newCondition()}
 * to create the Condition etc.
 * <p>
 * {@link java.util.concurrent.locks.ReentrantLock}:
 * This is the most widely used implementation class of Lock
 * interface. This class implements the Lock interface in similar way as
 * synchronized keyword. (see App.java for more)
 * <p>
 * {@link java.util.concurrent.locks.Condition}:
 * Condition objects are similar to Object wait-notify model with
 * additional feature to create different sets of wait. A Condition object is
 * always created by Lock object. Some of the important methods are
 * {@link java.util.concurrent.locks.Condition#await()}
 * that is similar to {@link Object#wait()}.
 * {@link java.util.concurrent.locks.Condition#signal()} and
 * {@link java.util.concurrent.locks.Condition#signalAll()}
 * that are similar to
 * {@link Object#notify()} and {@link Object#notifyAll()} methods.
 * <br><br>
 * Codes with minor comments are from
 * <a href="http://www.caveofprogramming.com/youtube/">
 * <em>http://www.caveofprogramming.com/youtube/</em>
 * </a>
 * <br>
 * also freely available at
 * <a href="https://www.udemy.com/java-multithreading/?couponCode=FREE">
 *     <em>https://www.udemy.com/java-multithreading/?couponCode=FREE</em>
 * </a>
 *
 * @author Z.B. Celik <celik.berkay@gmail.com>
 */

= concurrent.util package in general Thread pools in particular =
a lot of stuff. Example:
http://tutorials.jenkov.com/java-util-concurrent/scheduledexecutorservice.html
http://tutorials.jenkov.com/java-util-concurrent/threadpoolexecutor.html
= Thread pools =
    * Create fixed number of threads threadpool:  ExecutorService executor = Executors.newFixedThreadPool(2)
    * Create unspecified number of threads threadpool:   ExecutorService executor = Executors.newCachedThreadPool(); // 
        ExecutorService executor = Executors.newFixedThreadPool(2);//two threads, try setting by 1 to observe time
        Worker worker = new Worker(); just some class implementing Runnable interface
        for (int i = 0; i < 10; i++) {//worker.run is called 2 (threads started) times by two threads
            executor.submit(worker);  // will only start 2 threads (5 times) for 10 iterations
        }
        executor.shutdown(); //prevents new tasks from being accepted by the ExecutorService
        try {
            executor.awaitTermination(1, TimeUnit.DAYS);    // wait 1 day for threads to finish
            // Examples here: http://stackoverflow.com/questions/1250643/how-to-wait-for-all-threads-to-finish-using-executorservice
        } catch (InterruptedException ex) {}
= CountDownLatch =
 * CountDownLatch latch = new CountDownLatch(3);    // init CountDownLatch to 3
 * latch.countDown();                               // will decrement it by one

  Source:  http://stackoverflow.com/questions/17827022/what-is-countdown-latch-in-java-multithreading</em><br>
  java.util.concurrent.CountDownLatch#await() will wait until count reaches zero or its interrupted
  by another thread. All other thread are required to do count down by calling latch once they are completed or ready.
  As soon as count reaches zero, Thread awaiting starts running. One of the
  disadvantage of CountDownLatch is that it's not reusable once the count reaches to
  zero you can not use {@link java.util.concurrent.CountDownLatch} any more.
  Use CountDownLatch when one thread, like main thread, require to wait for one or more threads to complete, before it can
  start processing.
  Classical example of using CountDownLatch in Java is any server side core  Java application which uses services
  architecture, where multiple services are provided by multiple threads and application can not start processing
  until all services have started successfully.
= Producer/consumer =

      Thread safe implementation of Queue data structure so you do not need to worry about synchronization.
      BlockingQueue implementations are thread-safe. All queuing methods are atomic in nature
      and use internal locks or other forms of concurrency control. 
      Java 1.5 introduced a new concurrency library {@link java.util.concurrent}
      which was designed to provide a higher level abstraction over the wait/notify mechanism.
= Notify NotifyAll wait =
 * both wait and notify are used with the locking object:
    synchronized (lock) {
                
                while(list.size() == LIMIT) {
                    lock.wait();
                }
             // do stuff
             lock.notifyAll();
             }
http://stackoverflow.com/questions/37026/java-notify-vs-notifyall-all-over-again
http://www.programcreek.com/2009/02/notify-and-wait-example/</em>

= Semaphore =
* semaphore can be bumped from ANY thread
* sem.availablePermits() returns 10 in the example below
    private Semaphore sem = new Semaphore(10, true);
    sem.acquire();
* sem.acquire() and sem.release()
*
= Callable and Future =
https://www.caveofprogramming.com/java-multithreading/java-multithreading-callable-future-video-tutorial-part-13.html
to get results from your threads and to allow your threads to throw exceptions
Future<Integer> future = executor.submit(new Callable<Integer>() {
            @Override
            public Integer call() throws Exception {
            ....
            return (Integer) someNumber;
System.out.println("Result is: " + future.get());            
