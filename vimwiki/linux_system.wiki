= shutdown / restart = 
    sudo shutdown -r now
    sudo reboot
= bash boot source sequence =
/etc/profile
~/.bash_profile
~/.bashrc
~/.bash_login
~/.profile
~/.bash_logout
= switch user =
$ whoami
user1
$ su - user2
Password:
$ whoami
user2
# to switch to root:
$ su -
= general command line commands =
== find ==    
  * combine find with grep:
    find . -name \*.cpp -exec grep -q "debug" '{}' \; -print
  * return file names only
    find . -type f -name "*John*"	
  * find and remove all symbolic link
    rm $(find / -type l | xargs ls -l | grep /mnt/test | awk '{print $9}')
== grep ==    
-l  :only file names are returned
== uniq ==
sort -u -t, -k1,1 file
-u for unique
-t, so comma is the delimiter
-k1,1 for the key field 1
= xargs =
# instead of cp -r -v -p /share/media/mp3/ /backup/iscsi/mp3
find -L /share/media/mp3/ -type f -name "*.mp3" -print0 | xargs -0 -r -I file cp -v -p file --target-directory=/backup/iscsi/mp3
# explanation
-0    (or -null) is useful when the name may contain white spaces
-I  replace_str  (used to be -r)   - 
    replace occurrences of replace-str in the initial-arguments 
    with names read from standard input.
 -print0   -  print the full file name on the standard output, followed by a null character  (instead  of the  newline  character  that  `-print' uses)
-L  - follow symbolic links
= tar / tar.gz =
* list contents of tar.gz
    tar -tvzf file.tar.gz
* list contents of tar.bz2
    tar -jtvf file.tar.bz2
* extract just one file/dir from the tarball
    tar -zxvf mytar.ball.tar.gz directory-name
* update file in tarball (not zipped)
  add new files and update modified
    tar -uvf my.tar some-directory/
* delete a directory from tarball
    tar --delete -f file.tar 'path1/dir1'
= crontab =
usage:  crontab [-u user] file
        crontab [-u user] [ -e | -l | -r ]
                (default operation is replace, per 1003.2)
        -e      (edit user's crontab)
        -l      (list user's crontab)
        -r      (delete user's crontab)
*     *     *   *    *        command to be executed
-     -     -   -    -
|     |     |   |    |
|     |     |   |    +----- day of week (0 - 6) (Sunday=0)
|     |     |   +------- month (1 - 12)
|     |     +--------- day of        month (1 - 31)
|     +----------- hour (0 - 23)
+------------- min (0 - 59)

0 20 * 1,6,12 1-5   From Su to Fr on Jan, June and Dec at 20:00
= networking =
 * netcat nc
    * scan all ports in a range (verbose)
      netcat -z -v domain.com 1-1000
      * -n means noDNS
      netcat -z -n -v 111.111.111.111 1-1000 2>&1 | grep succeeded
    * listen to specific port
      netcat -l 4444
      * sending side could do netcat domain.com 4444  to send messages
    * netcat as web server
      while true; do nc -l 8888 < index.html; done
 * socat
    * To redirect all port 80 conenctions to ip 202.54.1.5 (just like netcat):
      socat TCP-LISTEN:80,fork TCP:202.54.1.5:80
      (sleep 5; echo YOURSSHPASSWORDHERE; sleep 5; echo date; sleep 1) |socat - EXEC:'ssh -l userName server1.nixcraft.net.in',pty,setsid,ctty
    * connect to the remote ssh server, use pty for communication between socat and ssh,
      make it ssh's controlling tty (ctty), and makes this pty the owner of a new process group (setsid),
      so ssh accepts the password from socat
      (sleep 5; echo "echo hello"; sleep 5; echo date; sleep 1) |socat - EXEC:'ssh -l sauce dslov.dev.saucelabs.net',pty,setsid,ctty
      
    * use it as a file server:
      http://unix.stackexchange.com/questions/22308/socat-reliable-file-transfer-over-tcp
      socat -u FILE:test.dat TCP-LISTEN:9876,reuseaddr     # server side, -u means unidirectional
      socat -u TCP:ramen2.dev.miso:9876 OPEN:test_client.dat,creat,trunc     # client side
    * socat verbose mode
      sudo  socat -d -d -d  TCP:localhost:9876 OPEN:/tmp/lxchef.453,creat,trunc
 * netstat
  prints all the ports
 * tcpdump  
 * curl 
    curl -O http://github.com/tpope/vim-vividchalk/raw/master/colors/vividchalk.vim
    curl 'www.vim.org/scripts/download_script.php?src_id=19375'  > ~/.vim/autoload/pathogen.vim
    curl -i -X POST -H "Content-Type:application/json" -d '{  "firstName" : "Frodo",  "lastName" : "Baggins" }' http://localhost:8080/
    curl -sSL https://get.docker.com/ | sh
 * wget
  wget http://ftp.gnu.org/gnu/wget/wget-1.5.3.tar.gz ftp://ftp.gnu.org/gnu/wget/wget-1.10.1.tar.gz.sig
  ** resume download: wget -c 
  ** download in bg: wget -b 
  ** wget --http-user=narad --http-password=password
  ** wget --ftp-user=narad --ftp-password=password 
  ** wget --accept pdf,jpg --mirror --progress --adjust-extension --convert-links --backup-converted --no-parent http://site/path/
 * scp
scp -i ~/Desktop/amazon.pem ~/Desktop/MS115.fa  ubuntu@ec2-54-166-128-20.compute-1.amazonaws.com:~/data/
== ssh ==
  * simple example
    ssh -i /path/to/id_rsa -p 4242 myuser@serverhost
http://blog.joncairns.com/2013/12/understanding-ssh-agent-and-ssh-add/
  * running ssh-agent in your shell starts a daemon and outputs smth like:
        SSH_AUTH_SOCK=/tmp/ssh-MUyniqn10506/agent.10506; export SSH_AUTH_SOCK;
        SSH_AGENT_PID=10507; export SSH_AGENT_PID;
  * port forwarding -L [bind_address:]port:host:hostport
  Specifies that the given port on the local (client) host
ssh dslov@100.65.0.17 -L 2272:foghorn.systems.wvu.edu:2272 -L 2273:dgtest.systems.wvu.edu:2273 -L 443:dgtest.wvu.edu:443
  ** secure connection between two hosts (with entering pwd all the time
    http://mah.everybody.org/docs/ssh
  ** copy public key between 2 machines
    cat ~/.ssh/id_dsa.pub | ssh you@remote 'cat - >> ~/.ssh/authorized_keys'
=== ssh config ===
  * /etc/ssh/ssh_config  - system wide ssh config
  * $HOME/.ssh/config    - user ssh config
  * syntax:
    * # - comment are line starting with #
    * both equal sign and space used
        config=value    or config value
        config1=value1 value2   or  config value1 value2
    * wildcard could be used in hostname    
  * simple example will allow to run ssh server1
    ### default for all ##
    Host *
        ForwardAgent no
        ForwardX11 no
        ForwardX11Trusted yes
        User nixcraft
        Port 22
        Protocol 2
        ServerAliveInterval 60
        ServerAliveCountMax 30
    Host server1
     HostName server1.cyberciti.biz
     User nixcraft
     Port 4242
     IdentityFile /path/to/id_rsa
     LocalForward 3128 127.0.0.1:3128
StrictHostKeyChecking 
= device management =
 * cat /proc/mounts
 * mount
 * unmount issues:
  http://unix.stackexchange.com/questions/15024/umount-device-is-busy-why
   * first check is lsof
    lsof /mnt/test/
   * nfs-kernel-server is exporting the directory  
    showmount -e
    /etc/init.d/nfs-kernel-server stop
    umount /mnt/test
   * loopback device backing file exists in the dir
      losetup -a
      losetup -d /dev/loop1
   * A swapfile exists in the dir
      swapoff /mnt/test/testdir/swapfile
   *  device failed
      dmesg
   * if chroot is the culprit (replace "chroot" with the path to the chroot). 
     sudo ls -l /proc/*/root | grep chroot
= System administration =
* kill -l will list all signals
* lscpu or	      less /proc/cpuinfo
* free <-m|t|g> or    less /proc/meminfo
    ** free -gt, free -mt
* dmidecode --type 17
* lshw -short -C memory
* uname -mrs  : kernel info
* lsb_release -a  : release info (it's not installed everywhere)
* fdisk -l | grep '^Disk /dev/'  : Display installed hard disk and size
ssh -i /Users/dans/ama_test_key.pem ec2-user@52.11.163.16 -v    : AWS ubunthu
ssh -i /Users/dans/ama_test_key.pem ec2-user@52.25.81.84 -v	: amazon_linux
scp  -i ~/ama_test_key.pem ~/Downloads/chef-server.rpm  ec2-user@52.11.163.16:/home/ec2-user/downloads
* vmstat
vmstat 5
* systemctl
== chroot ==
 * install dchroot and debootstrap
 * vim /etc/schroot/schroot.conf
    [vivid]
    description=Ubunutu15.04 Vivid Vervet
    location=/home/vagrant/experiments/chr
    priority=3
    users=vagrant
    groups=sbuild
    root-groups=root
 * sudo debootstrap --variant=buildd --arch i386 vivid /home/vagrant/experiments/chr http://mirror.url.com/ubuntu/
 * to get into jailed system: sudo chroot /home/vagrant/experiments/chr, to get out: exit
 * to be able to send signals to processes running in jail do:
   sudo mount -o bind /proc /my/chroot/folder/proc
 * network support (cp dns file):
   cp /etc/resolv.conf to jailed folder
 * in chroot: export DISPLAY=0.0  
== mount ==
http://www.linuxchix.org/content/courses/filesystem/Lesson5.html
 * /etc/mtab
 * /proc/mounts
 * /etc/fstab
== Disk administration ==
* mount
  mount -t iso9660 -o ro /dev/cdrom /mnt
  -t type, -o - mode (rw or ro)
  * binding points:
     mount -B /mydata /mnt    # old_dir new_dir
        # mount | grep /mydata
                /dev/sda6 on /mydata type ext2 (rw)
                /mydata on /mnt type none (rw,bind)
* df will show:
  Filesystem     1K-blocks      Used Available Use% Mounted on
    /dev/sda5      195069136 128345036  56958520  70% /
    udev             2008336         4   2008332   1% /dev
* check how much space avail in /tmp
df -h /tmp
= user administration =hr-model30-247282
* change user home directory
usermod -m -d /newhome/username username
* add existing user to existing group
  sudo usermod -a -G oinstall dans
grep group-name /etc/group  : check group exists 
* add user/group
groupadd <group-name>	    : create group
useradd -G <group-name> username
* change ownership
id -u			    : user id
id -g           : group id
id -G	    : all user's groups
chown -R `id -u` /data/db	    : change ownership for whatever id-u returns
chgrp -R group_name file/directory_name    : change dir group
= generate key =
== keytool ==
* valid for 3650 days
    keytool -genkey -alias <your alias> -storetype PKCS12 -keyalg RSA -keysize 2048 -keystore keystore.p12 -validity 3650
== ssh-keygen ==
* generate public/private key pair. Default is ~/.ssh/id_rsa and ~/.ssh/id_rsa.pub
ssh-keygen -t rsa -b 4096 -C "your_email@example.com"
* Copies the contents of the id_rsa.pub file to your clipboard
    pbcopy < ~/.ssh/id_rsa.pub
* may need to start ssh-agent
    eval "$(ssh-agent -s)"
* add identity to     
ssh-add ~/.ssh/id_rsa    
== openssl ==
    * generate private key (using des3 to protect the key by pw)
    openssl genrsa -des3 -out server.key 2048
******  optional sidetrack block to use key to sign **********
    * (optional) see what's inside there
     openssl pkey -in server.key  -text
    * generate public key
     openssl pkey -in server.key -out pub.key -pubout
    echo "sign me message" > messagetosign.txt
    openssl pkeyutl -sign -in messagetosign.txt -inkey server.key -out signature 
    openssl pkeyutl -verify -in messagetosign.txt -sigfile signature -pubin -inkey pub.key
    openssl rsautl -verify  -in signature -pubin -inkey pub.key
    * encrypt the message:
    openssl pkeyutl -encrypt -in plainmessage.txt -pubin -inkey pub.key -out cyphermsg.bin
    * decrypt the message (using private key):
    openssl pkeyutl -decrypt -in cyphermsg.bin -inkey server.key -out  plainmessage.txt

****** end of sidetrack **********
** (optional) to remove passphrase:
    cp server.key server.key.org
    openssl rsa -in server.key.org -out server.key
** generate csr (certificate registration request) 
    openssl req -new -key server.key -out server.csr
** generate self-signed 
    openssl x509 -req -days 365 -in server.csr -signkey server.key -out server.crt
** restart apache and test
    /etc/init.d/httpd stop
    /etc/init.d/httpd start
== crontab ==
EDITOR="gvim" crontab -e
# minute hour day-of-month month day-of-week command
# */20  - here */ means interval ie every 20 min
# Example: run job every 10 min
*/10 * * * * /usr/bin/somedirectory/somecommand
# run job every 10 min as root
*/10 * * * * root /usr/bin/somedirectory/somecommand

== random stuff from old notes ==
get dns server:
nslookup
> server
traceroute
ifconfig -a
flush dns cache:
dscacheutil -flushcache
list dns:
networksetup listallnetworkservices
set default dns server for wifi:
sudo networksetup -setdnsservers Wi-Fi  8.8.8.8

= filesystem =
https://www.kernel.org/doc/Documentation/filesystems/ramfs-rootfs-initramfs.txt
* ramfs - fs/ramfs/inode.c
* rootfs -  fs/ramfs/inode.c
* yaffs2
* extfs
* tmpfs
* 
= memory management =
 * /dev/shm http://www.cyberciti.biz/tips/what-is-devshm-and-its-practical-usage.html
