########LOADING FRZ STARTING:
old style:
tg_ta -cell rseumtxc -ri
tg_clone
#new style (and the only one that works now):
#Example:
tg_ta -cell $DBB -rf  $FUB_PV_ARCHIVE/rahtc/tango/save/rahtc.frozen_2008_1013_132405__rahtc__dslov___delays  -ri
#
tg_clone -window <new_window>
##################################################################################
ALL REPORTS
   To change p2p run: tg_delays_default -compression_limit <#p2p> ; tg_delays_defaults -enable_path_compression true
   Run: tg_delays [-limit <#of paths>] [-threshold <margin_threshold [ns]>]
   0.4 Reports:
	- To generate all reports run: tgta_run_reports
	- To generate only max.err run: maxerr [-file <file_name>]
Reports:

tg_get_valid_reporn accuracy2%i2 -mode setup -direction In
or better yet:

TANGO> array set valid_result [tg_get_valid -epin accuracy2%i3]
This command returns the total number of events:
TANGO> puts $valid_result(len)
2
This is an example how to get the delay value of the first event:
TANGO> puts $valid_result(0,delay)
0.122112
This example returns the transition of the second event:
TANGO> puts $valid_result(1,tran)
H2L



##################################################################################
PARTIAL DESIGN:

tg_set_partial_design -from rseumtxc:se_1
or:
tg_set_partial_design -reset   -through {{rseumtxc/irsmtxmidio/irsmtxmidiohalfhi/irsmtxwrwlblk[0]:rsmtxwrenvorm202h}}

tgta_run_delays 
or
tg_delays -thr 100 -limit 1000
 (default threshold 0.2)
tgta_paths_report -file <filename>
or:
tgta_paths_report -to_path 500 -to_margin 0.32 -file /tmp_proj/PDGUI_dslov_TI_OUTPUT_9.dat 

#################################Or another way:###################################

tg_clone   /    tg_clone -window "new_win" [-display <other vnc>]
tg_delays -limit 100 -thr 10 -required -setup -bfs  (or dwc in query language)
tg_set_partial_design -from / - to / -through -reset

####### GUI ###########
tg_gui_init

###### miscelaneous
command_to_file {command} "filename"
# print memory and runtime info
snap

###################################################################################
QUERY LANGUAGE:


get n <net> name
get n <net> rcv_pins:m
get p <pin> ml
get all valids of input pins
get e <cell> in_pins:ml

or:
cell_get_pins ramitc in
inst_get_ipins ramitc/int in

QUERY LANGUAGE:
get p $p vlu mlu    for pin
print the vector pins overrides 
get p {fubA%vec[*]} ovr


driver pins:
get n $n drv_pins:mlu,mld      for net
get n $n drv_pins:vlu,vld 
get n $n drv_pins:mtu,mtd 
get n $n drv_pins:vtu,vtd 
receiver pins:
get n $n rcv_pins:v,r 

tr iftl


tr iftlbd%bpnpclipdsbifum121h[15]
same as:
tg_trace_wc -required -mode max  hswcore/taken/iftlbd%bpnpclipdsbifum121h[15]
and tv (trace valid) is the same as
tg_trace_wc  -mode max  hswcore/taken/iftlbd%bpnpclipdsbifum121h[15]

dwc (fct)         -- tg_delays -wc 1 -setup -hold -limit 0 -required -verbose all


generate table: 
print all qc (qualified clock) pins max valids and margins and direction 
        gen_table -fields "name dir vlu vld mlu mld" -cond {qc == 1} 

print qc nets with lcp in there name
        gen_table -obj_type n -fields "name qualified_clock"  -cond {{qualified_clock == 1} {name == .*lcp.*}} 

print all the vector pins margin, sorted 
        gen_table -fields "name mlu mld" -cond {{name == fubA%vec[.*]}} -sort_col {1} -sort_type {incr_num} 

print (sorted) all pins of fub_a with negative max margin to file 
gen_table -fields "name mlu mld mtu mtd" 
                  -cond {{ mlu != "NO_VAL" } {ml < 0} {name == fub_a.*}} 
                  -sort_col {0 1} -sort_type {incr_num incr_num} -file margins_rep.txt 

gen_table -obj_type p  -fields "name qualified_clock" -cond  {name == .*merges.*mqn.*} -file pin_list
gen_table -fields "name vlu vld mlu mld" -cond  {ml != "NO_VAL"} -sort_col {1 2} -sort_type {incr_num incr_num}
gen_table -fields "name vlu vld mlu mld"  -cond {{name == idqctlnp%.*} {dir == out}}

####################################################################################
tp 1      is an alias for tg_p_report -id 1
tps 1    tg_p_sum_report -id 1

####################getting slopes################################################################
enet_get_epins rseumtxc:wlpt3[20]

AND THEN AFTER GETTING:
{rseumtxc/irsmtxenthih%wl3[20]} {rseumtxc/irsmtxmiddleio%wlpt3[20]} {rseumtxc/irsmtxmidio%wwlpt3[20]}

TYPE:
tg_trace_wc_slope -epin <pin name>
to get worst case slopes
Or:
tg_trace_wc_slope -enet  <net name>

tg_trace_wc <pin name>     the same as   tv (check also tru,trd - trace required?)
tv fub%pin -limit 5 -file aaa -norm
enet_get_epins    the same as get n <net name> drv_pins:name rcv_pins:name


####################################################################################
OR CONNECTIVITY REPORT:
tg_epin_report <epin> 
tg_enet_report <enet> 
tg_elem_report <elem>

####################################################################################
CREATE SQL:
tgta_sql_db_create rseusetupc  tango/tdb/$cell_name

####PATH EXTRACTION IN ORDER TO COMPARE BETWEEN PRESTO AND TANGO: 
tg_path_extract -path_id 1 -auto
tg_p_report -id 1 -sim -file try

####################################################################################
SET SDL PATH:

tg_set_sdl -template <tmpl> -nets <sdl out nets>

####################################################################################
CONTENTION REPORT:
tg_contention_report -file <name> -no_floating -threshold 0.0 -trace -verbose -append
OR:
tg_contention_report -enet <net_name> -trace

####################################################################################
SESSION:

tgta_run_delays
get p <net name>  vl vt
tg_set_partial_design -reset
tgta_paths_report  -through {{rahtc/irahtcary[0]/irahtcbankc00/irahtcslicec0f0v0[0]:rdbll1ys0}}    -num_paths 500 -file /tmp_proj/PDGUI_agalperi_25815_TI_OUTPUT_0.dat

####################################################################################

Q



source /nfs/iil/disks/home01/ebarnett/home_data/perl/pdgui_v4.43/my_tango_procs.tcl
tgta_set_p2p_limit 10
tg_ignore_path_delay_ovr -through {rseumtxc/irsmtxmidio/irsmtxmidiohalfhi/irsmtxwrwlblk[0]:dealloc800h_en} -multi_phase
tg_set_partial_design -reset   -through {{rseumtxc/irsmtxmidio/irsmtxmidiohalfhi/irsmtxwrwlblk[0]:rsmtxwrenvorm202h}}
tgta_run_delays
tgta_paths_report -to_path 500 -to_margin 0.32 -file /tmp_proj/PDGUI_dslov_TI_OUTPUT_9.dat 



If you just want to generate the max/setup/min/hold reports with a new EVR - you do not need a full tango run for it. (your netlist is the same/carmel files/cap rep ext .)
This example will output new reports for fub fubname to output_file. Replace names to suit your own configuration.

1.	Load tango, opening freeze file: 
gsrcore-eden> tg_ta -ri -cell fubname
2.	Invoke clone command, if something goes wrong you can always fall back: 
TANGO> clone
3.	Invoke tg_load_evr to load new fubname.evr from tango/evrbvr directory. 
TANGO> tg_load_evr -dir <full path to workarea>/tango/evrbvr
4.	Rerun delay stage (replace 20000 with desired number of paths):
optional: tg_delays_default -compression_limit <#p2p> 
      or  tg_delays_defaults -enable_path_compression true
	  tg_delays [-limit <#of paths>] [-threshold <margin_threshold [ns]>] 

TANGO> tg_delays -limit 20000
5.	Print summary into file: 
TANGO> tg_p_sum_report -file output_file -append
6.	Append path reports after the summary: 
TANGO> tg_p_report -file output_file -append
or if you prefer setup hold reports:

5. Print setup+hold report
TANGO> tgta_paths_report -file "p_${filename}.setup.rep"
TANGO> tgta_paths_report -file "p_${filename}.hold.rep" -view hold



Debugging:
1.   tg_build -cell accuracy2 -stdlib -view sch
tg_p_sum_report
tg_build -cell accuracy2 -stdlib -view schfbg
in_relation mutex  irsmtxenthih/irsmtxrownbh[11]/irsmtxmemcell[13]/wl2 irsmtxenthih/irsmtxrownbh[1]/irsmtxmemcell[13]/wl2
source aaa.txt
vivi aaa.txt
2.     set write_en_port_1 [list]
for {set e 0} {$e <= 8} {set e [expr $e + 2]}  {lappend write_en_port_1 "rseusetupc/iramtxsetupbndl\[4\]/irsmtxsetupent\[${e}\]:ckp1wlm1n44"}
puts "tg_set_smi_relation -directive [list mutex1 $write_en_port_1]"
3.   command_tofile {command} file_name


TANGO>tg_disable_arc_ovr -template rsmtxwrwlblk -any -from ckmtx -start_transition h2l -to gt_clk -end_transition l2h -tag config_chopper 
1
TANGO>tg_disable_arc_ovr -template rsmtxwrwlblk -any -from clkarrayslow -start_transition l2h -to  gt_clk -end_transition h2l -tag config_chopper

Oren weiss session with freeze file:
tg_ta -cell rseumtx -ri -rf tango/save/rseumtxc.frozen_2008_0709_225936__rseumtxc__dslov___delays

enet_get_epins rseumtxc:clkarray[53]
foreach pin [enet_get_epins rseumtxc:clkarray[53]  any flat ]  {puts $pin}
mob_viewer rseumtxc:clkarray[53]
tg_disable_arc_ovr -template rsmtxwrwlblk -any -from ckmtx -start_transition h2l -to gt_clk -end_transition l2h -tag config_chopper

tg_get_valid_report -epin {rseumtxc/irsmtxmidio/irsmtxmidiohalfhi/irsmtxwrwlblk[26]/ck2n77bf/mqp1%g}
tg_delays
tg_get_valid_report -epin {rseumtxc/irsmtxmidio/irsmtxmidiohalfhi/irsmtxwrwlblk[26]/ck2n77bf/mqp1%g}

get_property {rseumtxc/irsmtxmidio/irsmtxmidiohalfhi/irsmtxwrwlblk[26]/clkarraych/mqn1} z
source /nfs/iil/disks/home01/ebarnett/home_data/perl/pdgui_v4.43/my_tango_procs.tcl
tgta_set_p2p_limit 10
tg_ignore_path_delay_ovr -through {rseumtxc/irsmtxmidio/irsmtxmidiohalfhi/irsmtxwrwlblk[0]:dealloc800h_en} -multi_phase
tg_set_partial_design -reset   -through {{rseumtxc/irsmtxmidio/irsmtxmidiohalfhi/irsmtxwrwlblk[0]:rsmtxwrenvorm202h}}
tgta_run_delays
tgta_paths_report -to_path 500 -to_margin 0.32 -file /tmp_proj/PDGUI_dslov_TI_OUTPUT_9.dat 

TANGO>get -help

Usage: get <object=p|n|e> <objectName> { <attribute list> } [-val]

arguments:
<object>     - Can be either p/n/e for pin, node, element respectively.
<objectName> - Object's name. could be a pattern.
<attribute>  - A list of attributes to be printed for each object.
[-val]  - if this is given the get will return value, instead of printing it to the scrine 

Pin's attributes:
~~~~~~~~~~~~~~~~:
commands/cmd - get command cheat, of possible queries on the pin
graph - print the pin related timing graph information
connectivity - print pin connectivity report
ovr - report pins overrides
checks - report checks on the pin
sources- report sources on the pin
timing  - report pin valid/required and margin
Margin[Lead|Trail][Up|Dn] -     m[l|t][u|d] - worst case margin
Valid[Lead|Trail][Up|Dn]     -     v[l|t][u|d]  - worst case valid
Required[Lead|Trail][Up|Dn] -  r[l|t][u|d] - worst case required
slu|sld|stu|std - source value
clu|cld|ctu|ctd - check value
Direction - pin direction 
Slope[Up|Dn] - slope of wc valid max 
qc - is qualified clock
nodes - Print the pin's timing nodes
to_arcs - Print the pin's incoming timing arcs
from_arcs - Print the pin's outgoing timing arcs
all - Print all attributes
n:<net attribute>  - Print the pin's owner net attribute
e:<element attribute>- Print the pin's owner element attribute
<tango prop name> And all properties of pins: (for example: maxcload mincload zpullup lpullup zpulldn lpulldn function shortname...)

Net's attributes:
~~~~~~~~~~~~~~~~~
commands/cmd - get command cheat, of possible queries on the net
graph - print the net related timing graph information 
connectivity - print net connectivity report
ovr - report overrides on the net or it's pins 
checks - report checks on the net's pins
sources- report sources on the net's pins
timing  - report net valid/required and margin of the net
nodes - Print the net's timing nodes
to_arcs - Print the net's incoming timing arcs
from_arcs - Print the net's outgoing timing arcs
drv_pins:<pin attribute>  - Print the net's driver pins attributes
rcv_pins:<pin attribute>  - Print the net's receive pins attributes
<tango prop name> - all properties of nets like: possupp negsupp nodetype fanin fanout shortname qualified_clock...

Element's attributes:
~~~~~~~~~~~~~~~~~~~~~
in_pins:<pin attribute>  - Print the cell input pins attributes
out_pins:<pin attribute>  - Print the cell output pins attributes
io_pins:<pin attribute>  - Print the cell ioput pins attributes
<tango prop name> - all properties of elements like: elemtype fanin fanout tempname
Examples:
# print the pin name, the net name, valid lead up and margin lead up
get p $p name n:name vlup mlu
# get max margin of pin (as value)
set pin_max_magin [get p $p ml -val]


vlup    valid lead up
mlu     margin lead up

TANGO>paths -help
USAGE:
paths <N> [-norm|-bfs] [-file <file>] [-rep_limit M] [-brs_sinks <elems and pins list>] [-wc 0]  - run search and print the paths summary
paths N [-file <file>] [-rep_limit M]-  run branches path search of N worst paths (with rerun of worst case analysis), and print M first paths summary 
paths N -brs_sinks <elems and pins list>  [-file <file>] -  run branches path search of N worst paths, only on the specific elements and pins that where given. Note: you have to give the full element and pins name (including the top element).
paths N -wc 0 [-file <file>]- run branches path search of N worst paths (without rerun of worst case analysis), and print them to the screen. 

dwc
sortmax fdfdf  mt/ml
tg_sql_browser_init /nfs/iil/proj/skl/hsw_pv_archive/fub/ifsbd/tango/HSWA0LATEST/tango/analysis/sql/ifsbd/


avi ohana ran the following to see if the netlist is good:
dm_build -cell cbringturnd -view sn -path iscan/netlists/






######################################Mickey's What-If
alias tgi "tg_ta -cell $DBB -ri -irun 'source ~miluz/tools/tango_utils.tcl'"
tgi
tg_clone
target_cell - Target cell full path. Example: myfub/hier1/myinstancename
new_cell - The new library cell to replace the old one with. Example: ai0bfn00nn0f7
tt_partial_design_through "myfub:mynet myfub/hier1:another_net[5]"
tt_delays_and_setup_rep 20 pickaname_ref
tt_replace_cell myfub/hier1/myinstancename ai0bfn00nn0f7
tt_replace_cell "{mytemplate}/i0" ai0bfn00nn0f7
tt_delays_and_setup_rep 20 pickaname_tst
####reset all changes:
tt_partial_reset
tg_exit

# General notes:
# 
# tg_set_partial_design - when using commands containing the tg_set_partial_design, it is possible to use multiple nets in quotes "net1 net2".
#                         NOTICE: if net1 comes before net2 in the report file, it MUST come before net2 in their order inside the qoutes (i.e. "net2 net1" won't work)

# sets partial design on a net, run delays, and create a setup report
# the given filename will get p_ prefix and .setup.rep.gz suffix
# Example:
# TANGO> tt_partial_setup_report "rsbpc/arrayl:rdwlrp5[38]" rdwl1
# will create p_rdwl1.rep.gz setup report with paths passing through the specified net
proc tt_partial_setup_report {netname filename} { 
    tg_set_partial_design -through $netname
    tg_delays -limit 10000 -thr 320
    tgta_paths_report -file "p_${filename}.setup.rep"
    tg_set_partial_design -reset
}


# replace cells in the design
# instn - intance path
# devn - new lib cell
# Example:
# TANGO> tt_replace_cell "rsbpc/leftbio/leftbiodec/gbf4" ai0gbf12nn0g0
proc tt_replace_cell {instn devn} {
    if { [get_cell_by_name $devn] == "" } {
      load_cell [get_active_design] $devn iif DeviceLevel
    }
    mcc_replace -cell $instn -new_cell $devn -view iif -level DeviceLevel
}

proc ta_replace_cell {instn devn} {
#    lappend auto_path /p/mpg/proc/common2/utils/tool_utils/tango_lr/v3.9_ivb
    dev_lev_mcc $instn $devn
}
# run delay stage and generate setup report with n_limit paths
# the given filename will get p_ prefix and .setup.rep.gz suffix
# Example:
# TANGO> tt_delays_and_setup_rep 20 uopcode_0
# will create p_uopcode_0.rep.gz with 20 paths in setup.report format
proc tt_delays_and_setup_rep {n_limit filename} {
    tg_delays -limit $n_limit
    tgta_paths_report -file "p_${filename}.setup.rep"
}

proc tt_min_delays_and_rep {n_limit filename} {
    tg_delays -limit $n_limit -hold
    tgta_paths_report -file "p_${filename}.hold.rep" -view hold
}

###### only reports - no tg_delays

proc tt_setup_rep_no_delays {n_limit filename} {
    tgta_paths_report -file "p_${filename}.setup.rep" -num_paths $n_limit
}

proc tt_hold_rep_no_delays {n_limit filename} {
    tgta_paths_report -file "p_${filename}.hold.rep" -view hold -num_paths $n_limit
}

proc tt_inc_setup {n_limit filename} {
    tg_delays_incremental
    tgta_paths_report -file "p_${filename}.setup.rep" -num_paths $n_limit
}

proc tt_inc_hold {n_limit filename} {
    tg_delays_incremental
    tgta_paths_report -file "p_${filename}.hold.rep" -view hold -num_paths $n_limit
}
######

proc tt_all_delays_and_rep {n_limit filename} {
    tg_delays -limit $n_limit -hold -setup
    tgta_paths_report -file "p_${filename}.setup.rep" -view setup
    tgta_paths_report -file "p_${filename}.hold.rep" -view hold
}

# alias for the long and "untabbed" tg_set_partial_design command
proc tt_partial_design_through {through_net} {
    tg_set_partial_design -through $through_net
}

# resets partial design mode to entire design
proc tt_partial_reset {} {
    tg_set_partial_design -reset
    if {[tg_is_partial_design_mode]} {puts "Error: still in partial design mode. Re-enter tango."}
}

# extract a path from design, identified by path id, and run presto to compare tango and presto's results.
# output is in max.err format, with additional columns for presto results.
# Example:
# TANGO> tt_extract_and_sim 1 path_id_1
proc tt_extract_and_sim {path_id filename} {
    tg_path_extract -path_id $path_id -auto
    tg_p_report -id $path_id -sim -file "p_${filename}.max.err"
}

# reports worst case slope on a given net.
proc tt_slope_on_net_wc {net_name} {
    tg_get_slope -enet $net_name -mode setup
}

# rise and fall variants of the previous command
proc tt_slope_on_net_wcr {net_name} {
    tg_get_slope -enet $net_name -mode setup -tran l2h
}
0
proc tt_slope_on_net_wcf {net_name} {
    tg_get_slope -enet $net_name -mode setup -tran h2l
}


# will produce eop/sop reports under the name fub_contention.*.(trace)
# need to run before:
proc tt_domino_contention_report {num_limit} {
  tg_delays -hold -setup
  tg_domino_contention_report -hold -limit $num_limit -file test.eop.rep
  tg_domino_contention_report -trace -hold -limit $num_limit -file test.eop.rep
  tg_domino_contention_report -setup -limit $num_limit -file test.sop.rep
  tg_domino_contention_report -trace -setup -limit $num_limit -file test.sop.rep
}

proc tt_domino_contention_report_only {num_limit} {
#  tg_domino_contention_report -hold -limit $num_limit -file test.eop.rep
  tg_domino_contention_report -trace -hold -limit $num_limit -file test.eop.rep
#  tg_domino_contention_report -setup -limit $num_limit -file test.sop.rep
  tg_domino_contention_report -trace -setup -limit $num_limit -file test.sop.rep
}

# prints valid on a pin
proc tt_valid_report { pin_name } {
    tg_get_valid_report -epin $pin_name -slope
}

proc tt_trace { pin_name num_limit filename} {
    tg_trace -epin $pin_name -limit $num_limit -file "t_${filename}.trace"
}

proc tt_set_tp_pll { t_name } {
    set_property $tname model pll
}

proc tt_set_tp_nll { t_name } {
    set_property $tname model nll
}
### section #####

Enter apv setup:
uesetup -b "ooo_propeller" -p "ivbcore" -m "latest" -n <area_name>" -t "apv_proj" -pr "1270" -ov <work_area> d
To see all available servers type:                                                                                                                    
ls /p/mpg/proc/common2/da_utils/fct_ivbcore/bin/server_client/servers/                                                                                
There would ooo_vrf, fe, hsw_core etc                                                                                                                 
Type:
$FCT_SCRIPTS/server_client/apvCreateTangoClient.pl -tag ooo_vrf

uesetup -p "sklpf" -hp "sklpf" -m "hsw_latest" -b "fetch:taken" -n "fetch_propeller_sklpf" -t "apv_proj" -w "none" -pr "1270"
tg_ta -cell taken

############ TCL ################
info body <command_name>.tcl       to get tcl code

