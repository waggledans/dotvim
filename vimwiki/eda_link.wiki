# add searchpath
addpath('/nfs/site/eda/tools/mathworks/matlab/r2009a/linux_2.6.16_x86-64/toolbox/discovery/discoverydemos/Filter')
# start HDL listener
hdldaemon;
# The 'PreSimTcl' property causes the specified Tcl commands to be run at startup. 
# See the help for launchDiscovery for more information on the remaining property value pairs. 

preSimTclCmds = {
             'matlabtb lowpass_filter 10ns -repeat 10ns -mfunc lpfiltertestbench',...
             'force lowpass_filter.clk_enable 1 0ns',...
             'force lowpass_filter.reset 1  0ns, 0 22ns',...
             'force lowpass_filter.clk 1 0ns, 0 5ns -repeat 10ns',...
             'force lowpass_filter.filter_in 0 -deposit',...
            };

### Start the HDL Simulator
# First lets create a temporary working directory in which the HDL filter will be compiled. 
projdir = tempname;
mkdir(tempdir,strrep(projdir,tempdir,''));
# src lowpass_filter.v
srcfile = fullfile(matlabroot,'toolbox','discovery','discoverydemos','Filter','lowpass_filter.v');
tabaccessfile = fullfile(matlabroot,'toolbox','discovery','discoverydemos','Filter','lowpass_filter.pli_acc.tab');
# example:pv = launchDiscovery(PropertyValueStruct)
launchDiscovery( ...
    'VerilogFiles',srcfile, ...
    'TopLevel', 'lowpass_filter', ...
    'RunMode','GUI', ...
    'HostComm',    '45765', ...
    'RunDir',projdir,...
    'LinkType','MATLAB',...
    'PreSimTcl', preSimTclCmds, ...
    'AccFile',tabaccessfile,...
    'UseDefaultVgGnuPackage',  false, ...
    'VgGnuPackage',  '/nfs/site/eda/tools/synopsys/vggnu/2008.03/common', ...
    'SkipLaunch',  'true', ...
    'VgGnuGccVersion',        'gcc-4.1.2', ...
    'VlogAnFlags',  '"+v2k"' ...
);

launchDiscovery( ...
    'VerilogFiles',srcfile, ...
    'TopLevel', srcfile, ...
    'RunMode','GUI', ...
    'RunDir',projdir,...
    'LinkType','MATLAB',...
    'PreSimTcl', preSimTclCmds, ...
    'AccFile',tabaccessfile,...
    'UseDefaultVgGnuPackage',  false, ...
    'VgGnuPackage',  '/nfs/site/eda/tools/synopsys/vggnu/2008.03/common', ...
    'SkipLaunch',  'true', ...
    'VgGnuGccVersion',        'gcc-3.3.6', ...
    'VlogAnFlags',  '"+v2k"' ...
);

# Testbench function syntax: function [iport, tnext] = MyFunctionName(oport, tnow, portinfo)
# Component function syntax: function [oport, tnext] = MyFunctionName(iport, tnow, portinfo)
# iport - Structure that forces values on Verilog module's inputs in TB
# tnext - Specifies the time at which the HDL simulator schedules the next callback to MATLAB.
#    tnext should be initialized to an empty value ([]).
#    If tnext is not later updated, no new entries are added to the simulation schedule
# tnow - Receives the simulation time at which the MATLAB function is called. By default, time is represented in seconds.

# Gaining access to portinfo:
portinfo.field1.field2.field3
where field1 could be: in, out, inout, tscale
field2: portname
field3: type(reg, wire, integer), size (bits in vector)  
# For example: 
    tnext = [];         %% init tnext
    iport = struct();   % init iport struct
    if(nargin ==3)  %% first time being called? 
     hdlScale = 1/portinfo.tscale;    % coefficient to convert ticks to seconds
    end
    tnowInTicks = round(tnow*hdlScale); % convert from seconds to HDL resolution limit
    if (tnowInTicks > 22) %after reset
        iport.filter_in = dec2mvl(filterInput,8) %% input signed [7:0] filter_in; %dec2mvl - convert dec to 8-bit binary str
        % Get HDL output port value 
        hdlFilterOut = mvl2dec(oport.filter_out,true)/2^23; % normalize from s25,23
    end
setenv LD_LIBRARY_PATH /nfs/site/eda/tools/mathworks/matlab/r2009a/linux_2.6.16_x86-64/toolbox/discovery/linux64
or
setenv LD_LIBRARY_PATH /nfs/site/eda/tools/mathworks/matlab/R2011a/linux_2.6.16_x86-64/toolbox/edalink/extensions/discovery/linux64

to use gcc shared libs:
setenv LD_LIBRARY_PATH /usr/intel/pkgs/gcc/4.5.2/lib64:$LD_LIBRARY_PATH


# Matlab 2011 simulink edalink demo:
# Add ucli package to TCLLIBPATH
setenv TCLLIBPATH "/nfs/iil/eda/tools/synopsys/vcsmx/G-2012.09/common/etc/ucli $TCLLIBPATH"
# fix launchDiscovery and $PATH parameters to run vcsmx (and not vcs and not vcsi):
# For that set 'UseVcsi', false and set vcs to point to vcsmx (its intalled in $EDA_DIR)
           pv = launchDiscovery( ...
                'LinkType',    'Simulink', ...
                'VerilogFiles', vlogFiles, ...
                'TopLevel',     'manchester', ...
                'RunMode',      runMode, ...
                'RunDir',             '/nfs/iil/stod/stod075/w.dslov.101/cadence_lab/matlab/myrun', ...
                'VlogAnFlags', '+v2k', ...
                'PingTimeout', 60,...
                'UseVcsi', false, ...
                'PreSimTcl',    ...
                   { 'force manchester.clk 1 0, 0 5 -repeat 10', ...
                     'force manchester.enable 1 0', ...
                     'force manchester.reset 1 0, 0 1000' }, ...  
                'AccFile',      fullfile(demoBase, 'manchester.pli_acc.tab'), ...
                 'UseDefaultVgGnuPackage',  false, ...
                 'VgGnuPackage',  '/nfs/site/eda/tools/synopsys/vggnu/2010.06/common', ...
                 'VgGnuGccVersion',        'gcc-4.2.2' ...
        );
