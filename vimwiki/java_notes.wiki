= Language specifics =
* protected constructors can be called by subclasses and by other classes in the same package
unlike in C++ where protected members can only access by subclass
* constants
// Java way would be final static class variable
public final static String NAME = "I'm a static variable";
* 
= Generics =
== Map ==
* Hashtable is synchronized
Hashtable<String, Integer> numbers  = new Hashtable<String, Integer>();
* HashMap
Not synchronized. Can be synchronized by Collections.synchronizedMap(myMap);
or better:
synchronized(myMap) {
    if (!myMap.containsKey("tomato"))
        myMap.put("tomato", "red");
}
* 
= Strings =
StringBuffer is synchronized, StringBuilder is not.

== string equality test ==
== tests for reference equality.
.equals() tests for value equality.
= Assertions =
public class IIDemo
{
   final static int NORTH = 0;
   final static int SOUTH = 1;
   final static int EAST = 2;
   final static int WEST = 3;
   public static void main(String[] args)
   {
int direction = (int) (Math.random() * 5); switch (direction)
{
         case NORTH: System.out.println("travelling north"); break;
         case SOUTH: System.out.println("travelling south"); break;
         case EAST : System.out.println("travelling east"); break;
         case WEST : System.out.println("travelling west"); break;
         default   : assert false; // better to use throw new AssertionError(direction);
} }
}
= Annotations =
It is possible to add your own annotations

= Pattern regex =
private static final Pattern POINT_PATTERN = Pattern.compile("\\((\\d+),(\\d+),(\\d+)\\);?");
Matcher matcher = POINT_PATTERN.matcher(line);
while (matcher.find()) {
/*do something*/}
int left   = Integer.parseInt(matcher.group(1));
int height = Integer.parseInt(matcher.group(2));
int right  = Integer.parseInt(matcher.group(3));
return points;
== Matcher object methods ==
boolean matches() // true only if the entire string matches the pattern
boolean lookingAt()
boolean find()
boolean find(int start)
== split using regex ==
String input =
"This!!unusual use!!of exclamation!!points";
print(Arrays.toString(Pattern.compile("!!").split(input)));
== Regular expressions and Java I/O ==
See TIJ book, Scanning input
== SQL ==
https://bitbucket.org/xerial/sqlite-jdbc

