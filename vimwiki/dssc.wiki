# skill
# get cell+view path
path = dssGetViewPathP("testlib_a" "basiccell" "schematic")
# get lib+cell but no view
path = dssWritePath(ddGetObj("testlib_a" "basiccell"))
# get lib - no cell,no view
path = dssWritePath(ddGetObj("testlib_a" nil))
# message could be anything, silent could be t or nil, branchName is Trunk or any other branch
dssConfigSetSelector(path strcat(branchName ":Latest")  message silent)
# example of branching a lib and selecting a branch:
setSel = t
res = dssMkbranchInt(libName nil nil branchName setSel)
dssCmdSummary(list(res) "Branch Library" 'branchLibrarySummary)
# update the cell:
#
libSpec= gdmCreateSpec(testlib_a "" "" "" "CDBA")
cellSpec= gdmCreateSpec(testlib_a "cella" "" "" "CDBA")
cellViewSpec= gdmCreateSpec(testlib_a "cella" "schematic" "" "CDBA")
gdmupdate( gdmCreateSpec(testlib_a "" "" "" "CDBA") nil "Latest")

### create a branch from skill:
dssBranchCellP(   t_libName t_cellName t_branchName  [?checkLocked g_checkLocked]   [?setSelector g_setSelector]
  [?silent g_silent] ) => t/nil

dssBranchCellViewP( t_libName t_cellName t_viewName t_branchName
  [?checkLocked g_checkLocked] [?silent g_silent] ) => t/nil

dssBranchLibraryP( t_libName t_branchName [?checkLocked g_checkLocked]
  [?setSelector g_setSelector] [?silent g_silent] ) => t/nil
################## get version ###########################################
dssLibraryStatusP(
  t_libName [?silent g_silent]
)
=> l_status
l_status is a list of the form (nil
name t_name
modulePath t_modulePath
libName t_libName
libPath t_libPath
dmType t_dmType
vaultPath t_vaultPath
cachePath t_cachePath
selector t_selector
localMirrorPath t_localMirrorPath
vaultMirrorPath t_vaultMirrorPath
serverStatus t_serverStatus)

dssGetViewVersionP(
  t_libName t_cellName t_viewName [?useCache g_useCache]
  [?quick g_quick] [?silent g_silent]
)
=> t_version
dssGetFileVersionP(
  t_fileName [?useCache g_useCache] [?quick g_quick]
)
=> t_version

### checkin checkout:
dssCheckinFileP
  (tl_fileNames [?mode t_mode] [?force g_force]
  [?comment t_comment] [?skip g_skip] [?new g_new]
  [?retain g_retain] [?silent g_silent] [?tag g_tag]
  [?background g_background][?recursive g_recursive]
  [?branch t_branch] [?iflock g_lock]
  [?moduleContext t_moduleContext]
) => nil/(x_pass x_fail)
dssCheckinLibraryP(
  t_libName [?viewNames l_viewNames] [?mode t_mode]
  [?force g_force][?comment t_comment] [?skip g_skip]
  [?new g_new] [?retain g_retain] [?silent g_silent]
  [?background g_background] [?moduleContext t_moduleContext]
  [?branch t_branch] [?iflock g_lock] [?tag g_tag]
) => nil/(x_pass x_fail)
dssCheckinCellViewP(
  t_libName t_cellName t_viewName [?mode t_mode]
  [?force g_force] [?comment t_comment] [?skip g_skip]
  [?new g_new] [?silent g_silent] [?background g_background]
 [?branch t_branch] [?iflock g_lock] [?tag g_tag]
)
=> nil/(x_pass x_fail)



dssCheckoutLibraryP(
  t_libName [?viewNames l_viewNames] [?mode t_mode]
  [?tag t_tag] [?force g_force] [?incremental g_incremental]
[?overlay g_overlay] [?retain g_retain]
[?unifyState g_unifyState][?silent g_silent]
[?background g_background] [?moduleContext t_moduleContext]
) => nil/(x_pass x_fail)
dssCheckoutCellP(
  t_libName tl_cellNames [?viewNames l_viewNames]
  [?mode t_mode] [?tag t_tag] [?force g_force]
[?overlay g_overlay] [?retain g_retain]
[?unifyState g_unifyState] [?silent g_silent]
[?background g_background]
)
=> nil/(x_pass x_fail)

### dss usefull skill commands:
dssCompareViewsP

dssCompareViewsP(
  d_cv1 d_cv2 [?fileName t_outFile] [?silent g_silent]) => x_diffs

dssGetViewVersionsP(
  t_libName t_cellName t_viewName
  [?branchName t_branchName]
) => l_versions
    t_branchName is a branch name. Specify a branch selector, not a branch dot-numeric version number.  You can also specify one of the following values:
        all: Returns all versions. (Default)
        current: Returns all versions on the branch of the version that is currently in the workspace.









# then need to update
# get version history  in dssc shell
vhistory -nodefaults -norecursive -branch "" -maxtags all -report verbose
# or in regular shell
dssc vhistory -nodefaults -norecursive -branch Trunk . -report verbose
# or in CIW:
path = dssWritePath(ddGetObj("dslov_liba" nil))
opts = "-all -report NBT -recursive"
(dssReportVHistory path nil nil  opts) ;; will print the branch history on the screen
data =  dssCmd( "dssVhistory %s %L %s %s %L" dssWrapName(path) opts "0" "0" "" ?dssData t) ;;will save all to data
# example: 
vhistory -nodefaults -all -recursive -maxtags all -report NTB file:///usr/home/lib1/testlib_a


#create a vault
setvault -recursive sync:my_server.com:2647/usr/home/vaultenv_testing@Trunk /usr/home/testing/tstlib
ci -new -recursive -share -cfile /tmp/syco4620279550788252517.tmp /usr/home/testing/tstlib

# check the current vault:
dssc url vault .
# check the current selector:
dssc url selector .
# create the vault:
setvault -rec sync://sync_server:30000/Projects/myproj/usr/tstlib tstlib
# or dssc setvault sync://privatelibraries:30000/Projects/myproj/usr/tstlib -rec .
# set the selector to trunk:
dssc setselector Trunk -rec . 
# checkin everything
ci -new -noc -keep -skip -rec -force tstlib/*


# example of populating a working folder with local copies
setvault -recursive sync://sync_serv:50031/Projects/myproj/dummylib@Trunk 
/usr/home/analog_setup/tstlibs/dummylib
populate -recursive -get -nodefaults -dir /usr/home/tstlibs/dummylib

# 1. Create a new working folder and associate it with an existing vault folder:
dss> mkfolder /home/jean/Projects/Asic
dss> setvault sync://granite:2647/Projects/Asic /home/jean/Projects/Asic
# 2. Change folders to the Asic folder:
dss> scd /home/jean/Projects/Asic
# 3. Using the populate command with the -recursive and -get options, fetch all the latest versions of the files, thus creating a local working design hierarchy that is exactly like the design hierarchy on the SyncServer:
dss> populate -get -recursive
# 4. Create tag from latest (for example):
dss> tag release1 -recursive -version Latest /home/greg/Projects/Asic
# 5. Populate release1 tag:
dss> tag release1 -recursive -version Latest /home/greg/Projects/Asic

dssc populate -recursive -get -noemptydirs -force -dir /usr/home/tstlibs/testlib_b
# From stclc:
populate sync://sync_serv:50031/Projects/myproj/tstlib -recursive
Checking Out a Release
####  Suppose that Greg has tagged a configuration "release1". Beth, a regression test engineer on Greg's team, wants to get this release.
dss> mkfolder /home/beth/Testing/Asic
dss> setvault sync://granite:2647/Projects/Asic /home/beth/Testing/Asic
dss> populate -get -rec -version release1 -dir /home/beth/Testing/Asic
#### Retiring Obsolete Files
# The command below retires the current branch of the alu.v file. Use the -unretire
dss> retire alu.v

### branch
# 1. Create a tag first
dss> tag -recursive devA-bp .
dss> tag -recursive devB-bp .
# 2. Create the branches:
dss> mkbranch -recursive devA .
dss> mkbranch -recursive devB .
setselector -recursive
# example of making a branch
mkbranch -nodefaults -recursive expa -nocomment file:///usr/home/analog_setup/tstlibs/dummylib/cella
# example of selecting a branch for library dummylib
setselector -recursive devA file:///usr/home/tstlibs/dummylib

### report
# get the current Branch or Version
dssc url getprop /../schematic.sync.cds Version
