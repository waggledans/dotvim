### Data type ###
integer, floating point, string, list  - (1 "two" 3 4) boolean - t nil 
type( 4 )  ;; will return fixnum (integer)
type( 4.3 )  ;; will return flonum 
procedure( x(a b) a+b)		;; associates symbol x with function taking two arguments
strength = 'weak ;;assigns the symbol as a value to the variable strength
arglist( 'printf )   ;; to see arguments of printf (or any other) function

# for loop could be written in 3 different ways:
for( i 1 3 print( x ) )    ;; for( i 1 3 ( print x ) ) ;; ( for i 1 3 ( print x ) )
# foreach loop
foreach(i list("the" "cad") print(upperCase(i)) )
# to see log file (or any other text file)
view("~/CDS.log.7")
#neat trick to see how SKILL replaces operators with SKILL functions:
tracef(t)
untrace()
# to see a type of variable: 
type(var_name)
println(var_name) or printf("Something is %n" var_n)   ;;%s - string %d  - digit
storyLine = strcat( "mary had a little" " lamb" )
############## lists ##########
numbers = '(1 2 3)
# concatination:
result = nil   ; storing nil under name result, sort of init
result = cons(1 result)  ; result holds now (1), the second arg of cons must be a list
result = cons(2 result) ; result is (2 1) now
reverse( result )
right = '(0 -1)
moreResult = append(result right) ;; append takes right and appends it to the end of result
newList = list( 7 )    #turns 7 into a list
car(list) cdr(list)
# windows:
geOpen() # opens "Open file window", returns the number of the new window => window( 7)
geOpen( ?lib "master" ?cell "mux2" ?view "schematic" ?mode "r")
# define procedure
procedure( openCell(libN cellN )
    myDesignWindow = geOpen( ?lib libN  ?cell cellN ?view "schematic" ?mode "r")
    ;;
)
# to get all the prefixes:
hiGetBindKeyPrefixList()
("&Hierarchy Editor" "ADE State" "BBTEditor" "Command Interpreter" "Design Synthesis"
    "Graphics Browser" "   Virtuoso CE" "   Virtuoso XL"  "Read veriloga" "Schematics"
    "   Diva"  "   Other-Schematic" "   Schematics XL" "   Simulation"
    "   Spectre-Schematic" "   UltraSim-Schematic" "   adegxl-schematic" "   adexl-schematic"
    "Show File"  "Simulation-Symbolic" "Symbol" "   Symbol XL" "Text" "Verilog-AMS" "adegxl" "adexl" "amsArtist-Schematic"
    "amsDmv" "analogArtist-Schematic" "analogArtist-Simulation" "encap" "mixedSignalArtist-Schematic" "schMixedSignal" "systemVerilog" "wsfWaves"
)

########## menus ######
hiCreateSimpleMenu		# to create pop up for example
hiCreateMenuItem			# to create pulldown menu. This creates 1 menu item.
hiCreatePulldownMenu			# to create pulldown menu. This creates a menu containing a title and items.
hiInsertBannerMenu				# to create pulldown menu. This inserte pd menu in some window

#### cdsinit
#set simulator to ams:
envSetVal( "asimenv.startup" "simulator" `string "ams")
# to open LibManager:
ddsOpenLibManager()
# close whats new window
ddsNewsClose()
# load cdsenv:
ANALOG_CDSENV = strcat( CDS_PROJ_DIR "/.cdsenv")
envLoadFile( ANALOG_CDSENV)
# change default for inst name
envSetVal("cdba" "dbInstNamePrefix" 'string "cell_" )
#In the .cdsenv:
cdba dbInstNamePrefix string "Cell_"
# change default for log file just set the shell env:
setenv CDS_LOG_PATH ${WORK_AREA_ROOT_DIR}/rundir/opus
# also setenv  CDS_LOG_VERSION  pid will give CDS.log.<pid number> (as opposite to CDS_LOG_VERSION sequential)
# get log file from icde:hiGetLogFileName() 
# enable 64bit cxt compile:
setenv CDS_AUTO_64BIT ALL

# Do the descend edit with nothing selected, and then hit F3. On the resulting form, pick "query view name list".
# From then onwards, all descends will pick the view in the config, or in the view list in the schematic editor options form
envSetVal("schematic" "descendTarget" 'string "use viewNameList")
# To make all instance objects unselectable, try this:
envSetVal("schematic" "schematicSelectFilter" 'string "allSchObj")
# If you want instance pins selectable, try this:
envSetVal("schematic" "schematicSelectFilter" 'string "allSchObj instancePins")
# This can be put in your .cdsenv like this:
schematic       schematicSelectFilter   string  "allSchObj"

# lists:
caaar  car(car(car(...)))
caadr  car(car(cdr(...)))
and so on
 
###### regex #########
# Remove newline character:
    myString="some\nstring\n"
    printf(myString)
    while(rexMatchp("\\([^\n]*\\)\n\\([^\n]*\\)" myString) myString=rexSubstitute("\\1 \\2") )
    printf(myString)

############ COE environment:
# getSkillPath()
("/p/coeenv/cadroot/DT_skill/11.4.1/*"
"."
"/nfs/site/eda/data/fm_cse_04073/dt/cadence/6.15.508ehf542/linux_2.6.5_x86-64/tools.lnx86/dfII/local"
"~"
"/p/coeenv/cadroot/safran/12.1.5_64/perl_modules" )
############ Useful DT procedures :
DTGrowSkillPath( t_Dir)  ;;"append one dir to end of skill path unless already in skillpath"
getSkillPath() ;; to check if it worked 
DTConsOr( g_elt l_list)  ;;"cons new element onto list unless alread a member of the list"
DTSkillPathSearch( file )   ;;"find the entry of the skill path where the given file can be found"
(DTMailFile ?subject \"test mail\" ?data '(1 2 3 4) ?file \"/etc/passwd\")"
DTSubstString(t_String " " "_")
DTFindExec 'cat => /bin/cat  ( DTUnixPaths data base is needed) 
DTMkdir t_dir => 
DTSetShellEnvVar() t_var t_val)
DTIsSameDir( t_dir1 t_dir2)
#running system commands from SKILL
(system (sprintf nil "%s %s %s | %s -s %s %s" (DTFindExec 'cat) tfile file  (DTFindExec 'mail) subject user))

procedure( A() x = 5 ) let( (( x 2 ))x= 3 A() x ); let

# DEBUG
break, ciwMenuInit, debugQuit, debugStatus, getAllLoadedFiles,
getFunctions, hiReplayFile, hiShowFieldBorders, hnlCDLPrintBSIM3SOIElement,
installDebugger, lmgrVerbose, next, ocnm, ocnmSetDebug, sevDebug,
sevNetlistAndDebug, step, stepend, uninstallDebugger, whereIs


# SDF
cdfDump("yourLib" "yourTran.cdf" ?cellName "yourTran") 

# write protect:
sstatus( writeProtect t )
setFnWriteProtect('func_name) => t
setFnWriteProtect('func_name) => nil  ;; already write protected
getFnWriteProtect('func_name) => t
setVarWriteProtect('y) => nil
# find where the procedure is defined:
whereIs(ADACheckAndSaveAll)
