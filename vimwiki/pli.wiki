Question:
How to link in PLI shared objects in VCSMX for unified use model flow?
Answer:
In Unified use model, at "vcs" command line, users are not expected to
pass on any source file. The syntax is -

vlogan ..
vhdlan ..
vcs [lib.]<top>
simv

In pure verilog, 2 step flow, vcs accepts .c, .cpp, .o, .a or .so files 
directly on the command line. But in unified use model, to avoid tool getting
confused with .so file extension as actual for [library.]<entity> format,
it is better to use standard linker conventions. Follow these steps -

1. Name your shared file as "lib<name_of_the_library>.so 
	
e.g. libmypli.so or libbfm.so

2. On VCS command line, use -LDFLAGS options to pass location
of this library and the name of this library in an abbreviated manner 

-LDFLAGS "-L<path to your library> -l<name_of_the_library>"

e.g. 

-LDFLAGS "-L/home/john/plilocation -lbfm" 

In this case linker will search for libbfm.so(library name constructed
from -lbfm) in the path specified by -L, in this case the search path is 
/home/john/plilocation

You can use multiple LDFLAGS options for multiple libraries. vpi_user.h
For PLI Applications whose functions call IEEE Standard VPI routines as documented in the IEEE Verilog Language Reference Manual.
acc_user.h
For PLI Applications whose functions call IEEE Standard ACC routines as documented in the IEEE Verilog Language Reference Manual.
vcsuser.h
For PLI applications whose functions call IEEE Standard TF routines as documented in the IEEE Verilog Language Reference Manual.
vcs_acc_user.h
For PLI applications whose functions call the special ACC routines implemented exclusively for VCS.
##  The following is the syntax of the PLI table file:
$name PLI_specifications [access_capabilities]
# $name - functions
##
# PLI_specifications:
    call=function
    check=function # compiletf routine (or checktf)
    misc=function # misctf routine
    data=integer # to use with a number of calls, checks or misc functions
    size=number  # size of return value in bits (could be also r for real, is implemented as sizetf function in other simulators)
    args=number
    persistent      # Enables you to enter the user-defined system task on the UCLI or DVE command line without including any of the debug compile-time options
# Example 1
$val_proc call=val_proc check=check_proc misc=misc_proc
# VCS calls the function named val_proc when it executes the associated 
# user-defined system task named $val_proc.
# It calls the check_proc function at compile-time to see if the user-defined system task has the correct syntax,
# and calls the misc_proc function in special circumstances like interrupts.
##
# access_capabilities
acc=|+=|-=|:=capabilities:module_names[+]|%CELL|%TASK|*
# capabilities:
r|rw|wn
cbk - callback to be called when,for example, named objects (nets) change value
cbka - callback_all on named and unnamed objects
Example 1
$val_proc call=val_proc check=check_proc misc=misc_proc acc+= rw,tchk:top,bot acc-=tchk:top
Example 2
$value_passer size=0 args=2 call=value_passer persistent acc+=rw:%TASK acc-=rw:%CELL
# vcs can learn what acc are required, just add +vcs+learn+pli  to simv.
# and then recompile with +applylearn+filename
`celldefine and +nocelldefinepli+2+ports combination
