
I. Setup tools needed for vams simulation: presto, mynx, vcs
1. Enter uesetup with tool set to analog (-t analog)
  For example:
    uesetup -b "analog" -d -hp "sklip" -keep -m latest -milestone cdr1 -p sklip -pr "1272.4" -w "none" -t analog 
    
    uesetup script is needed to set the following env variables:
      $LM_LICENSE_FILE, $VCS_HOME, $PRESTO_INSTALL_PATH, $WORK_AREA_ROOT_DIR,
      $PROJECT_TECH_FILE, $PROJECT_UPF_FILE, $PROJECT_SKEW
    One can set all those without running uesetup, for example:  
      setenv PROJECT_SKEW tttt
    and so on in order to run presto stand alone (without uesetup).
      set path = ( $path $VCS_HOME/bin )
2. Run presto & from uesetup shell.
3. Open f-file from Presto in order to build design.
If there are problems with the build one can try to compile files from the command line:
     mynx -c -f=files.f -s=vcs 
     or better
mynx -S +presto -o=dcc_top_exp1 -s=vcs -f=$WORK/presto/vams_labs/labs/dcc/dcc_top.f -q=prsmspl.log -I=$PRESTO_INSTALL_PATH/tcl -I=$MYNX/include
if spice is at top level open prs, subst the 
  Opening f-file would trigger the following:   
     a) prs_build -stdlib -multiple_view -file design.f
     b) mynx -S +presto -o=design_exp2 -s=vcs -f=design.f -q=prsmspl.log  -I=<f-file dir> -I=$MYNX/include
     -S  to split the design into separate language files with cross-domain connection information and then stop.
     c) set_analysis -pairs {10ps 1us} -index 0
     d) netlisting SPICE (TODO::Find the command to create a spice netlist)
4. Simulate:
First mynx simulates the design
example:
mynx -x +presto -s=vcs -o=dcc_top_exp1 $WORK/presto/mynx/dcc_top_exp1/dcc_top_exp1_1/mynx.ssp
then prs_exec:
example:
$PRESTO/bin/mynx_job_man.tcl mynx NONE vcs NONE -o=dcc_top_pr10_4 NONE NONE NONE $WORK/presto/mynx/dcc_top_pr10_4/dcc_top_exp1_1/mynx.ssp


# Dams compile example, just to show how to link NOVAS dynamic library to use $fsdbDumpvars(0, file_name);
vcs -f lab1.f -R -full64 +v2k -timescale=1ns/1ps -ad=my_init.init -ams -ams_discipline logic -P $NOVAS_HOME/share/PLI/vcs/LINUX64/novas.tab ${NOVAS_HOME}/share/PLI/vcs/LINUX64/pli.a |  & tee vcs.log      
-f          file containing a list of files to compile
-full64     Create 64bit executable (32b by default)
-ad         if control file isnt specified look for vcsAD.init
-o          output executable name (simv by default)
-ams_discipline     default discipline type (logic for digital signals or electrical for analog)
-override_timescale=1ns/10ps    timescale ( the analog time resolution cannot be greater than the digital time resolution)
# mixed-signal simulation setup file:

choose xa -nspice spice_files.spi -c cfg; # use xa for spice_files.spi
use_verilog top.i1.i2;                    # use vcs for instance i2.
use_spice top.i1.i3;                      # use spice for instance i3
use_verilog -module mux;                  # use verilog for all instances of mux
use_spice -cell inverter;                 # use spice for all instances of sub-circuit inverter
#

After simv is generated, the simulation can be run using the following syntax:
simv [vcs run-time options] 
example:
simv -l simv.log
#
simv -ucli  # initiate unified command line interface shell.
    

Printing Analog Signals
    The NanoSim print_node_v and print_node_i config commands
    The NanoSim print_veriloga_var config command to capture Verilog-A variables in the output
    $display, $strobe and $write functions within the Verilog-A code to dump Verilog-A variables or voltage and current values on the screen
    HSPICE .print and .probe commands 
    XA "probe_waveform_va -var *" config command to capture Verilog-A variables in the output
    HSIM ".param hsimvaprintvar=1" parameter to capture Verilog-A variables in the output
The format of the analog output file can be any one of the formats supported by the analog engine, including .vpd, .fsdb and ASCII .out. 
The following configuration commands must be used to set the output format for analog signals:
  For NanoSim
    set_print_format for=vpd | fsdb ... command inside the NanoSim config file. See the NanoSim User Guide for more details.
  For HSIM
    SPICE parameter .param HSIMOUTPUT=vpd to have HSIM generate a VPD output. By default HSIM generates an fsdb file. See the HSIMplus Reference Manual for more details.
  For XA
    set_waveform -format fsdb|wdf|wdb|out|vpd command inside the XA command file.
By default, the hierarchical nets that appear in multiple levels of the SPICE hierarchy with different names (aliases) appear only once under their top-level alias.
This makes the size of the analog output file more compact but could make chasing signals through the hierarchy difficult. The following configuration commands enable printing of all analog hierarchical aliases:
  For NanoSim use the "shorted_alias=1 hier_alias_level=<nn>" options of the "set_print_format" command. For example:
set_print_format shorted_alias=1 hier_alias_level=99
  For HSIM use "matchport=1" option along with ".probe/.print v(*)" or ".probe/.print i(*)" commands:
.probe v(*) matchport=1
.print i(*) matchport=1
   For XA use the "-port 1" option of the "probe_waveform_xx" commands. For example:
probe_waveform_voltage * -port 1



Output:
#Output files are written to local directory
.spo/.split/.info:  analog waveform file
.vcd:               digital waveform file
.sad:               connect insertion report
.fsdb               optional NOVAS format (using fsdbDumpvars)


mynx.pre0   // contains the code with macros expanded and the spice netlist (macro definitions are still in the file)
mynx.pre    // contains the code with macros expanded and the spice netlist (macro definitions removed)
mynx.pri  //just contains 1 line #pass 1
mynx.ssp
mynx.sva	//Mynx-generated VerilogA file
mynx.svd	//Mynx-generated (System)Verilog file

mynx.sad
    Nets in the mynx.sad file that are deemed analog by Mynx have a |A| suffix to their name.
    Digital nets have a |D| suffix.  Some nets have |A|D| or |D|A| after their name.  
    In this case, both analog and digital representations of the net exist inside of the simulator.
    The first char represents the orig domain of the net while the latter indicates its tunneling domain.
    For example, "my_net|D|A|" is a net that was declared digital by the user. 
mynx.sop  //contains all .v .va .vams module names
mynx.sat



&CELL <cell_name>
&udmpp
&ATTRIBUTES orig_name context defparam
&TYPES      STRING    STRING  STRING

mspl.log
vcs.pli
prsmspl.log




and to debug using vcs error messages


vcs xa compile:
vcs -ad=xa_init.init -ams -ams_discipline logic -f lab1.f -l comp.log -o simv
/p/com/eda/novas/verdi/2011.07/bin/nWave -ssf file_name.vcd
set nWave=/p/com/eda/novas/verdi/2011.07/bin/nWave


uesetup -b analog -hp sklip -p sklip -pr 1272.4 -m bdw_supera0r0_only -mi cdr1 -n <WARD> -ov < > -t analog -d
$NIKE_NETLISTER "-no_defl_for_non_mos" "-builder_specific_options" " -global_as_pin" -cell $cell -inf cdba_cdf -outf sn -outd $WORK_AREA_ROOT_DIR/$netlist_path

uesetup -b "analog" -d -hp "skluncore" -keep -m latest -milestone cdr1 -p
"sklip" -pr "1272.4" -w "none" -ov $s101/skl_aip -n analog_setup -t analog 

#to compile:
$MYNX/bin/mynx -c files -s=vcs

# the latest presto mynx build command (version 12.4.p2_64):
mynx -S +presto -0=rx_ams_exp1 -s=vcs /nfs/.../rx_ams_fullloop2.vams -q=rx_ams_fullloop2.654_build.log -I=$MYNX/include
+incdir+/nfs/.../codes -I/nfs/../netlists/spice

Running /p/mpg/proc/cad/em64t_linux26/presto/12.4.4.p1ams_64/local_cad/presto/12.4.4.p1ams_64/bin/mynx_job_man.tcl with -spl=1 /p/skl/rtl/cad/x86-64_linux26/mynx/12.4.p2_64/bin/mynx NONE vcs NONE -o=rx_ams_fullloop2_exp2 rx_ams_fullloop2_exp2 /p/mpg/proc/w/bmoshe/sklip/skl_a0/presto NONE NONE NONE /p/mpg/proc/w/bmoshe/sklip/skl_a0/presto/mynx/rx_ams_fullloop2_exp2/rx_ams_fullloop2_exp2_1/mynx.ssp
# mynx simulation (given ssp is generated
mynx -q=rx_ams_fullloop2_exp2_mynx.log -x +presto -s=vcs -o=rx_ams_fullloop2_exp2 mynx.ssp
# vcs.log:
vcs mynx.svd -l vcs.log -CFLAGS -Wall -sverilog -full64 -Mupdate +vpi -P ./vcs.pli /p/skl/rtl/cad/x86-64_linux26/mynx/12.4.p2_64/lib/libMYNX_PLI.so /nfs/.../name  +cli +memcbk -PP

