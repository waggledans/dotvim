= Example of how to declare class methods = 
// file String.H
// super strings - header 
#ifndef STRING_H 
#define STRING_H 
#include <iostream.h>
class String { 
    public:
    // constructors etc...
        String(); // String x
        String( const char a ); // String x = 'a' 
        String( const char* a ); // 
    // Copy constructor
        String(const String& str);
    // Destructor    
        ~String(); // destructor
    // Methods
        int length() const; 
        void print() const;
        void set(const char *a);
        const char* getref() const;
        char* getval() const;
    // Data
        String x = "abc" 
    protected:
    // Methods
    // Variables
    virtual:
    // Methods
    virtual double reverseString() const = 0; // abstract
    // Data
    private:
    // Methods
    // Data
        char* data_; // pointer to data
};
#endif
= Example of how to declare class methods = 
class Framis {
     enum { sz = 10 };
     char c[sz]; // To take up space, not used
     static unsigned char pool[];
     static bool alloc_map[];
   public:
     enum { psize = 100 };  // frami allowed
     Framis() { out << "Framis()\n"; }
    ~Framis() { out << "~Framis() ... "; }
    void* operator new(size_t) throw(bad_alloc); 
    void operator delete(void*);
};
unsigned char Framis::pool[psize * sizeof(Framis)]; 
bool Framis::alloc_map[psize] = {false};
// Size is ignored -- assume a Framis object void*
Framis::operator new(size_t) throw(bad_alloc) {
  for(int i = 0; i < psize; i++)
    if(!alloc_map[i]) {
      out << "using block " << i << " ... ";
      alloc_map[i] = true; // Mark it used
      return pool + (i * sizeof(Framis));
    }
  out << "out of memory" << endl;
  throw bad_alloc();
}
